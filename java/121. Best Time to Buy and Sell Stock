Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.

# 保存当前最低股价（买入价），并找到之后元素（卖出价）与当前最低股价的最大差值。注释掉的的两行是简略写法，但速度较慢。

public class Solution {
    public int maxProfit(int[] prices) {
        int maxp = 0;
        int l = prices.length;
        if(l <= 0) 
            return 0;
        int min = prices[0];
        for(int p: prices) {
            if(p < min) {
                min = p;
            }
            else if(p - min > maxp) {
                maxp = p - min;
            }
            // min = Math.min(p, min);  
            // maxp = Math.max(maxp, p - min);
        }
        return maxp;
    }
}

# Kadane's Algorithm，一种DP算法，用来解决max subarray problem。可以将原数组视为由相邻两个数的差值构成的数组，如[7, 1, 5, 3, 6, 4]变成
# [-6, 4, -2, 3, -2]。求最大差价的问题就转化成对新数组求解max subarray problem。
# Kadane's Algorithm例子：http://codeforces.com/blog/entry/13713

public class Solution {
    public int maxProfit(int[] prices) {
        int maxCur = 0, maxSoFar = 0;
        for(int i = 1; i < prices.length; i++) {
            maxCur = Math.max(0, maxCur += prices[i] - prices[i-1]);
            maxSoFar = Math.max(maxCur, maxSoFar);
        }
        return maxSoFar;
    }
}

