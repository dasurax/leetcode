Given a roman numeral, convert it to an integer.

Input is guaranteed to be within the range from 1 to 3999.

# Ⅰ（1）、X（10）、C（100）、M（1000）、V（5）、L（50）、D（500）。
# 小的数字（限于 Ⅰ、X 和 C）在大的数字的左边，所表示的数等于大数减小数得到的数。
# 左减时不可跨越一个位数。比如，99不可以用IC（100 - 1）表示，而是用XCIX（[100 - 10] + [10 - 1]）表示。

class Solution {
    public int romanToInt(String s) {
        int res = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            char c = s.charAt(i);
            switch (c) {
            case 'I':
                res += (res >= 5 ? -1 : 1);
                break;
            case 'V':
                res += 5;
                break;
            case 'X':
                res += 10 * (res >= 50 ? -1 : 1);
                break;
            case 'L':
                res += 50;
                break;
            case 'C':
                res += 100 * (res >= 500 ? -1 : 1);
                break;
            case 'D':
                res += 500;
                break;
            case 'M':
                res += 1000;
                break;
            }
        }
        return res;
    }
}

# 更直观的解法：cur小于pre，即左边的小于右边的，则要减去。
# 对应上面的“小的数字（限于 Ⅰ、X 和 C）在大的数字的左边，所表示的数等于大数减小数得到的数”这一条规则。

class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap<Character, Integer>();
		map.put('I', 1);
		map.put('V', 5);
		map.put('X', 10);
		map.put('L', 50);
		map.put('C', 100);
		map.put('D', 500);
		map.put('M', 1000);
		
		int num = 0;
		int pre = -1;
		for (int i = s.length() - 1; i >= 0; i--) {
			char ch = s.charAt(i);
			int cur = map.get(ch);
			if (cur >= pre) {
				num = num + cur;
			} else {
				num = num - cur;
			}
			pre = cur;
		}
		return num;
    }
}
