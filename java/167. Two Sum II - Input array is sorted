Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution and you may not use the same element twice.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2

#因为是排序过的，可以利用这一点达到比使用hashtable更快的速度
#两个指针从最左和最右开始走，当和大于目标时，如果右移左指针肯定无法得到解（结果会更大），因此将右指针左移
#当和小于目标时，如果左移右指针肯定无法得到解（结果会更小），因此将左指针右移

public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left = 0;
        int right = numbers.length - 1;
        while (left < right) {
            int v = numbers[left] + numbers[right];
            if(v == target) 
                return new int[] {left + 1, right + 1};
            if(v > target)
                right--;
            else
                left++;
        }
        return null;
    }
}

#二分查找，效率较低，一个指针遍历数组，并从指针右侧通过二分查找找到目标值，没找到则指针移动
vector<int> twoSum(vector<int> &numbers, int target) {
    if(numbers.empty()) return {};
    for(int i=0; i<numbers.size()-1; i++) {
        int start=i+1, end=numbers.size()-1, gap=target-numbers[i];
        while(start <= end) {
            int m = start+(end-start)/2;
            if(numbers[m] == gap) return {i+1,m+1};
            else if(numbers[m] > gap) end=m-1;
            else start=m+1;
        }
    }
}
