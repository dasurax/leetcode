Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

# DP算法。注意该问题与股票最大利润那题的区别。股票最大利润最小结果为0，该题可以为负数。
# 在数组出现第一个正数之前，curMax保存最大的负数。之后，curMax会保存连续的每一个正数段并与最大值比较。
# 如[-2,-1,-3,4,-1,2,1,-7,4]，第三轮后，连续正数段分别为4,3(4-1),5(4-1+2),6(4-1+2+1),之后出现了-1(4-1+2+1-7),则下一个正数段从4(4)开始。

public class Solution {
    public int maxSubArray(int[] nums) {
        int curMax = nums[0], totalMax = nums[0];
        int l = nums.length;
        for(int i = 1; i < l; i++) {
            curMax = Math.max(nums[i], curMax + nums[i]);  //取决于curMax的符号
            totalMax = Math.max(curMax, totalMax);
        }
        return totalMax;
    }
}

# 下面算法与上面基本一致，只不过把Math.max部分拆开了。

public class Solution {
    public int maxSubArray(int[] A) {
        int max = Integer.MIN_VALUE, sum = 0;
        for (int i = 0; i < A.length; i++) {
            if (sum < 0) 
                sum = A[i];
            else 
                sum += A[i];
            if (sum > max)
                max = sum;
        }
        return max;
    }
}
