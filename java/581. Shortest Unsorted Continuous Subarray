Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.

# 方法一：排序后找到第一个和最后一个与原数组不同的数， O(nlogn)

# 方法二：问题实际上是寻找两个逆序对（两个逆序对可能相同），第一个逆序对第一个元素是该未排序子数组的起始点（上述（6，4）中的6），
# 第二个逆序对的第二个元素是该未排序子数组的终止点（上述（10，9）中的9）。
# 正向遍历数组，找到最后一个比前面数中的最大值小的数。再逆向遍历数组，找到最前一个比后面数中的最小值大的数。

public class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int max = nums[0], min, start = -1, end = -2;
        int l = nums.length;
        min = nums[l - 1];
        for(int i = 1; i < l; i++) {
            //正向遍历数组，找到最后一个比前面数中的最大值小的数。
            if(nums[i] < max) {
                end = i;
            } else {
                max = nums[i];   
            }
            //逆向遍历数组，找到最前一个比后面数中的最小值大的数。
            if(nums[l - 1 - i] > min) {
                start = l - 1 - i;
            } else {
                min = nums[l - 1 - i];   
            }
        }
        return end - start + 1;
    }
}
