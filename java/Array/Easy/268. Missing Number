Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

Seen this question in a real interview before?

# 方法1，对0到n求和，同时对数组求和，再求差值：

public class Solution {
    public int missingNumber(int[] nums) {
        int l = nums.length;
        int sum = 0;
        for(int i: nums) 
            sum += i;
        return (l) * (l + 1) / 2 - sum;
    }
}

# 方法2，根据a^b^b=a(^为异或操作)，除了缺失的数，其他数都会因为异或操作相互抵消：

public class Solution {
    public int missingNumber(int[] nums) {
        int xor = 0, i = 0;
        for (i = 0; i < nums.length; i++) {
            xor = xor ^ i ^ nums[i];
        }

        return xor ^ i;
    }
}

# 方法3，二分查找（对于有序数组来说复杂度O(logn)）：

public int missingNumber(int[] nums) { //binary search
    Arrays.sort(nums);
    int left = 0, right = nums.length, mid= (left + right)/2;
    while(left<right){
        mid = (left + right)/2;
        if(nums[mid]>mid) right = mid;
        else left = mid+1;
    }
    return left;
}
