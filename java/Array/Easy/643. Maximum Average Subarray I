Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.

Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75
Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75
Note:
1 <= k <= n <= 30,000.
Elements of the given array will be in the range [-10,000, 10,000].

# 滑动窗口计算k个值的和，并保存最大值，注意只需用最终的最大值除以k求平均数，而不用求平均数的最大值。max和sum也无需使用double类型。

public class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int l = nums.length, i = 0;
        int sum = 0, max = 0;
        for(i = 0; i < k; i++) 
            sum += nums[i];
        max = sum;
        for(; i < l; i++) {
            sum -= nums[i - k];
            sum += nums[i];
            max = Math.max(max, sum);
        }
        return (double)max / k;
    }
}

# 使用java8新特性reduce（但是很慢）

public class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int sum = IntStream.range(0, k).map(i -> nums[i]).sum();
        return IntStream.range(k, nums.length).boxed().reduce(
                new int[] {sum - nums[0], sum},
                (arr, i) -> new int[] {arr[0] + nums[i] - nums[i-k+1], Math.max(arr[1], arr[0] + nums[i])},
                (x, y) -> x)[1] / (double)k;
    }
}
