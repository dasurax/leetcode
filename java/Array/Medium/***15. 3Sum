Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

***
# !!!!!使用回溯法会超时。之前的Combination sum要用回溯是因为长度不固定。
# 而本题中长度固定为3，因此只需对排序后数组的所有可能的起始点进行遍历，用0减去这个值得到一个新的target，
# 然后转换为1个2 SUM的问题，即在内层循环中找到两个相加为target的元素。因为数组已经排序了，因此可以用两个指针指向头和尾进行查找，复杂度O(N*N)。

class Solution {
    public List<List<Integer>> threeSum(int[] num) {
        List<List<Integer>> res = new LinkedList<>(); 
        if (num.length < 3) return res;
        Arrays.sort(num);
        for (int i = 0; i < num.length-2; i++) {
            if (num[i] <= 0 && (i == 0 || num[i] != num[i-1])) { //注意这里要跳过重复的元素。
                int lo = i+1, hi = num.length-1, sum = 0 - num[i];
                while (lo < hi) {  //转换为target为0 - num[i]的2 sum问题分。
                    if (num[lo] + num[hi] == sum) {
                        res.add(Arrays.asList(num[i], num[lo], num[hi]));
                        while (lo < hi && num[lo] == num[lo+1]) lo++;
                        while (lo < hi && num[hi] == num[hi-1]) hi--;
                        lo++; hi--;
                    } else if (num[lo] + num[hi] < sum) {
                        // improve: skip duplicates
                        while (lo < hi && num[lo] == num[lo+1]) lo++;
                        lo++;
                    } else {
                        // improve: skip duplicates
                        while (lo < hi && num[hi] == num[hi-1]) hi--;
                        hi--;
                    }
                }
            }
        }
        return res;
    }
}
