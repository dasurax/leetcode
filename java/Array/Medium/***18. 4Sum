Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note: The solution set must not contain duplicate quadruplets.

For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

***
# 对整个排序后数组遍历，问题转换为对每个数组元素num[i]，求target'=target-num[i]的3SUM问题。
# 注意4个if语句，用来剪枝，可以节省大量时间。

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int l = nums.length;
        List<List<Integer>> res = new LinkedList<>(); 
        if (l < 4) return res;
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 3; i++) {
            if(i > 0 && nums[i] == nums[i-1]) // avoid duplicate)
                continue;
            if (nums[i] + 3 * nums[l - 1] < target)  // z is too small
                continue;
            if (4 * nums[i] > target)  // z is too large
                break;
            if (4 * nums[i] == target) {  // z is the boundary
                if (i + 3 < l && nums[i + 3] == nums[i])
                    res.add(Arrays.asList(nums[i], nums[i], nums[i], nums[i]));
				        break;
            }
            threeSum(res, nums, i + 1, l, target - nums[i]);
        }
        return res;
    }
    
    public void threeSum(List<List<Integer>> res, int[] nums, int start, int l, int target) {
        for (int i = start; i < l - 2; i++) {
            if(i == start || nums[i] != nums[i-1]) { //注意这里要跳过重复的元素。
                if(i > start && nums[i] == nums[i-1]) // avoid duplicate)
                    continue;
                if (nums[i] + 2 * nums[l - 1] < target) // z is too small
                    continue;
                if (3 * nums[i] > target) // z is too large
                    break;
                if (3 * nums[i] == target) { // z is the boundary
                    if (i + 2 < l && nums[i + 2] == nums[i])
                        res.add(Arrays.asList(nums[start - 1], nums[i], nums[i], nums[i]));
                    break;
                }
                int lo = i + 1, hi = l - 1, sum = target - nums[i];
                while (lo < hi) {  //转换为target为0 - num[i]的2 sum问题分。
                    if (nums[lo] + nums[hi] == sum) {
                        res.add(Arrays.asList(nums[start - 1], nums[i], nums[lo], nums[hi]));
                        while (lo < hi && nums[lo] == nums[lo+1]) lo++;
                        while (lo < hi && nums[hi] == nums[hi-1]) hi--;
                        lo++; hi--;
                    } else if (nums[lo] + nums[hi] < sum) {
                        // improve: skip duplicates
                        while (lo < hi && nums[lo] == nums[lo+1]) lo++;
                        lo++;
                    } else {
                        // improve: skip duplicates
                        while (lo < hi && nums[hi] == nums[hi-1]) hi--;
                        hi--;
                    }
                }
            }
        }
    }
}
