Given an array S of n integers, find three integers in S such that the sum is closest to a given number, 
target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
   
# O(n*n)，外层循环遍历排序后数组，内层循环保持left和right两个指针。这三个数相加若大于target，若想离target更近，需要让和变小，因此right--。
# 小于target时同理。

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int l = nums.length, re;
        Arrays.sort(nums);
        re = nums[0] + nums[1] + nums[l - 1];
        for(int i = 0; i < l - 2; i++) {
            int left = i + 1, right = l - 1;
            while(left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                if(sum == target) {
                    return target;
                } else if(sum < target){
                    left++;
                } else {
                    right--;
                }
                if(Math.abs(re - target) > Math.abs(sum - target)) {
                    re = sum;
                } 
            }
        }
        return re;
    }
}
