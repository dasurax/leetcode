Find all possible combinations of k numbers that add up to a number n, 
given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

# 回溯法，注意是1到9的组合，因此不包含重复数字，即如[2,2,5]这样的结果不允许。原始数组相当于[1,2,3,4,5,6,7,8,9]。

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> lists = new LinkedList();
        bt(lists, new ArrayList(), 1, k, n);
        return lists;
    }
    
    public void bt(List<List<Integer>> lists, List<Integer> tmp, int start, int k, int target) {
        int size = tmp.size();
        if(size == k ) {
            if(target == 0)
                lists.add(tmp);
            return;
        }
        for(int i = start; i <= 9; i++) {
            tmp.add(i);
            if(target - i < 0)
                break;
            bt(lists, new ArrayList(tmp), i + 1, k, target - i);
            tmp.remove(size);
        }
    }
}
