Given an array of n integers where n > 1, nums, 
return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? 
(Note: The output array does not count as extra space for the purpose of space complexity analysis.)

# 乘积不包含自己，因此可以将乘积分为两部分，一部分为该数字左边的部分，另一部分为该数字右边的部分。如下例子，lefts最左边和rights最右边的1为填充。
# Numbers:     2    3    4     5
# Lefts:       1    2  2*3 2*3*4
# Rights:  3*4*5  4*5    5     1
# Lefts[i]中保存了从0到i-1的乘积，Rights[i]中保存了从l-1到i+1的乘积，因此Lefts[i]*Rights[i]是0到l-1且除去了i的乘积。
# 因为只能用一个output数组，因此Rights值可以用一个right值记录从右到左的累乘值。

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int l = nums.length;
        int[] output = new int[l]; 
        output[0] = 1;
        for(int i = 1; i < l; i++) {
            output[i] = output[i - 1] * nums[i - 1];
        }
        int right = nums[l - 1];
        for(int i = l - 2; i >= 0; i--) {
            output[i] *= right;
            right *= nums[i];
        }
        return output;
    }
}

# 左右方向的乘积都用一个tmp来保存。只是将第一个循环改为与第二个循环一致的处理方式，第二个循环与上面方法的第二个循环是一致的。

public int[] productExceptSelf(int[] nums) {
    int[] result = new int[nums.length];
    for (int i = 0, tmp = 1; i < nums.length; i++) {
        result[i] = tmp;
        tmp *= nums[i];
    }
    for (int i = nums.length - 1, tmp = 1; i >= 0; i--) {
        result[i] *= tmp;
        tmp *= nums[i];
    }
    return result;
}
