Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]

# 回溯法。回溯法重要的一点是add完了要remove。

class Solution {
    List<List<Integer>> lists = new ArrayList();
    int l;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        l = candidates.length;
        combine(candidates, new ArrayList(), target, 0);
        return lists;
    }
    
    public void combine(int[] candidates, List<Integer> tmp, int target, int start) {
        for(int i = start; i < l; i++) {
            if(target == candidates[i]) {
                tmp.add(candidates[i]);
                lists.add(tmp);
                break;
            } else if(target > candidates[i]) {
                tmp.add(candidates[i]);
                combine(candidates, new ArrayList(tmp), target - candidates[i], i);
                tmp.remove(tmp.size() - 1);
            } else {
                break;  
            }
                
        }
    }
}

# 可以将上面循环中的判断条件放到外面，简化循环内部：

class Solution {
    List<List<Integer>> lists = new ArrayList();
    int l;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        l = candidates.length;
        combine(candidates, new ArrayList(), target, 0);
        return lists;
    }
    
    public void combine(int[] candidates, List<Integer> tmp, int target, int start) {
        if(target < 0) return;
        if(target == 0) {
            lists.add(new ArrayList<>(tmp));
            return;
        }
        for(int i = start; i < l; i++) {
            tmp.add(candidates[i]);
            combine(candidates, new ArrayList(tmp), target - candidates[i], i);
            tmp.remove(tmp.size() - 1);
        }
    }
}
