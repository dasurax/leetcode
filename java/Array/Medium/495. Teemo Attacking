In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. 
Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.

You may assume that Teemo attacks at the very beginning of a specific time point, 
and makes Ashe be in poisoned condition immediately.

Example 1:
Input: [1,4], 2
Output: 4
Example 2:
Input: [1,2], 2
Output: 3

# 每个间隔所贡献的持续时间为这个间隔与duration间的较小值。若间隔较小，说明毒还没有结束就被加上新的毒，
# 若duration较小，说明这个间隔内毒会结束。

class Solution {
    public int findPoisonedDuration(int[] timeSeries, int duration) {
        int l = timeSeries.length;
        if(l == 0)
            return 0;
        int total = 0;
        for(int i = 1; i < l; i++) {
            total += Math.min(timeSeries[i] - timeSeries[i - 1], duration);
        }
        total += duration;
        return total;
    }
}

# 另一种考虑，如果所有间隔都大于duration，那么total=duration*length。
# 如果其中有间隔小于duration，那么应从total减去多算的时间duration-(timeSeries[i]-timeSeries[i-1])。

class Solution {
    public int findPoisonedDuration(int[] timeSeries, int duration) {
        int l = timeSeries.length;
        int total = l * duration;
        for(int i = 1; i < l; i++) {
            total -= Math.max(0, duration - (timeSeries[i] - timeSeries[i - 1]));
        }
        return total;
    }
}

# Use two variable to record current start and end point.
# If the start of new interval is greater than current end, meaning NO overlapping, 
# we can sum the current interval length to result and then update start and end.
# Otherwise just update the current end.
# 如[1,4,7,31,44,66,67,91],20，访问到31之前，start=1，end=7+20=27,则result=0+26=26。
# 之后result=26+(44+20-31)=59，result=59+(67+20-66)=80，result=80+20=100。

public class Solution {
    public int findPosisonedDuration(int[] timeSeries, int duration) {
        if (timeSeries == null || timeSeries.length == 0 || duration == 0) return 0;
        
        int result = 0, start = timeSeries[0], end = timeSeries[0] + duration;
        for (int i = 1; i < timeSeries.length; i++) {
            if (timeSeries[i] > end) {
                result += end - start;
                start = timeSeries[i];
            }
            end = timeSeries[i] + duration;
        }
        result += end - start;
        
        return result;
    }
}
