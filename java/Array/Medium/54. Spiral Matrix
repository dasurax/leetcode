Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].

# traverse right and increment rowBegin(t), then traverse down and decrement colEnd(r), 
# then traverse left and decrement rowEnd(b), and finally traverse up and increment colBegin(l).

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int rows = matrix.length;
        if(rows == 0)
            return new ArrayList();
        int cols = matrix[0].length;
        int count = 0, n = rows * cols, l = 0, r = cols - 1, t = 0, b = rows - 1;
        List<Integer> list = new ArrayList();
        while(count < n) {
            for(int i = l; i <= r; i++) {
                list.add(matrix[t][i]);
                count++;
            }
            if(count >= n) break;
            t++;
            for(int i = t; i <= b; i++) {
                list.add(matrix[i][r]);
                count++;
            }
            if(count >= n) break;
            r--;
            for(int i = r; i >= l; i--) {
                list.add(matrix[b][i]);
                count++;
            }
            if(count >= n) break;
            b--;
            for(int i = b; i >= t; i--) {
                list.add(matrix[i][l]);
                count++;
            }
            if(count >= n) break;
            l++;
        }
        return list;
    }
}

# c++:用dirs代表向四个方向的移动。 swap(m, n)用来切换上下移动和左右移动的界，d = (d + 1) % 4用来切换方向。

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>> &matrix) {
        vector<int> result;
        if (matrix.empty()) return result;
        result = matrix[0];  // no need to check the first row
        int dirs[4][2] = {{1, 0}, {0, -1}, {-1, 0}, {0, 1}};  // direction offsets
        int d = 0;  // direction index
        int m = matrix.size();
        int n = matrix[0].size();
        int pos[2] = {0, n - 1};  // start from the top right corner
        int i = (m - 1) * n;  // number of the rest numbers
        while (i > 0) {
            for (int j = 1; j < m; j++) {
                i--;
                pos[0] += dirs[d][0]; pos[1] += dirs[d][1];
                result.push_back(matrix[pos[0]][pos[1]]);
            }
            m--;  // decrease the size of row or column
            swap(m, n);  // switch between horizontal and vertical mode
            d = (d + 1) % 4;  // loop between direction offsets
        }
        return result;
    }
};
