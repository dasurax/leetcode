Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

# 先将intervals按start排序，若后一个interval的start>大于当前的end，说明没有重叠，新建Interval并重设start和end。
# 否则有重叠，这时只需更新end即可。注意可能有[1,5],[2,4]这种后面的end小于前面的end的情况，因此要取两者间最大值。

class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        int l = intervals.size();
        if(l == 0)
            return intervals;
        intervals.sort((i1, i2) -> Integer.compare(i1.start, i2.start));
        List<Interval> merged = new ArrayList();
        int start = intervals.get(0).start, end = intervals.get(0).end;
        for (Interval interval : intervals) {
            if(interval.start > end) {
                merged.add(new Interval(start, end));
                start = interval.start;
                end = interval.end;
            } else {
                end = Math.max(end, interval.end);
            }
        }
        merged.add(new Interval(start, end));
        return merged;
    }
}

# 上述代码较慢（可能是因为要对整个对象数组排序，以及求max的操作)，因此可以将start和end分开排序，再判断当前end和之后的start的大小。

class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        // sort start&end
        int n = intervals.size();
        int[] starts = new int[n];
        int[] ends = new int[n];
        for (int i = 0; i < n; i++) {
            starts[i] = intervals.get(i).start;
            ends[i] = intervals.get(i).end;
        }
        Arrays.sort(starts);
        Arrays.sort(ends);
        // loop through
        List<Interval> res = new ArrayList<Interval>();
        for (int i = 0, j = 0; i < n; i++) {  // j is start of interval.  
            if (i == n - 1 || starts[i + 1] > ends[i]) {
                res.add(new Interval(starts[j], ends[i]));
                j = i + 1;
            }
        }
        return res;
    }
}
