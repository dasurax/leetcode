Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].

# 用hashmap保存所有从0到i（即前i的数）的和。如果当前和为sum，若sum-k存在于map中，比如上例中访问到第二个元素时，sum为2，sum-k==0
# 存在于map中，说明从数组第0个元素到当前元素的和为k。若Nums=[0,1,1,1]，当访问到第三个元素时sum为2，sum-k==0,且sum-k对应的值为2，
# 说明从0开始的子数组和从1开始的子数组到当前元素的和都为k。

class Solution {
    public int subarraySum(int[] nums, int k) {
        int sum = 0, count = 0, l = nums.length;
        Map<Integer, Integer> preSum = new HashMap<>();
        preSum.put(0, 1);  //表示从头开始，即没有元素时和为0.
        for(int i = 0; i < l; i++) {
            sum += nums[i];
            count += preSum.getOrDefault(sum - k, 0);
            preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}
