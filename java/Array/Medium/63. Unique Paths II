Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.

# 和Unique Paths I几乎一样，对于障碍点，只需将它的值设为0，这样对于它右边的和下边的点，可以认为这条路是走不通的。

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[] tmp = new int[n];
        tmp[0] = 1;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(obstacleGrid[i][j] == 1) {
                    tmp[j] = 0;
                }
                else if(j != 0) {   //将条件合并，对于i=0，来说，tmp[j]+=tmp[j - 1]与tmp[j]=tmp[j - 1]一样。对于j=0，tmp[j]的值不变。
                    tmp[j] += tmp[j - 1];
                }
            }
        }
        return tmp[n - 1];
    }
}

# 因为输入提供的是数组，可以直接修改数组元素，而无需新的空间：

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        if(obstacleGrid[0][0] == 1)
            return 0;
        obstacleGrid[0][0] = 1;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i == 0 && j == 0)
                    continue;
                if(obstacleGrid[i][j] == 1) {
                    obstacleGrid[i][j] = 0;
                } else if(j != 0 && i == 0) {
                    obstacleGrid[i][j] += obstacleGrid[i][j - 1];
                } else if(j == 0 && i != 0) {
                    obstacleGrid[i][j] += obstacleGrid[i - 1][j];
                } else {
                    obstacleGrid[i][j] += obstacleGrid[i][j - 1] + obstacleGrid[i - 1][j];
                }
            }
        }
        return obstacleGrid[m - 1][n - 1];
    }
}
