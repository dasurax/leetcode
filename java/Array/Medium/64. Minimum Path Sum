Given a m x n grid filled with non-negative numbers, 
find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

# 动态规划：从最后开始。因为只能从下或右走，从[i,j]到终点的最短距离是grid[i,j]的值，
# 加上从右边走到终点的距离和从下边走到终点的距离中的较小值。
# 从最后开始，可以直接将计算后的从[i,j]到终点的最短距离保存到grid[i,j]中。

class Solution {
    public int minPathSum(int[][] grid) {
        int rows = grid.length, cols = grid[0].length;
        for(int i = rows - 1; i >= 0; i--) {
            for(int j = cols - 1; j >= 0; j--) {
                if(i == rows - 1) {
                    if(j != cols - 1) {
                        grid[i][j] += grid[i][j + 1];
                    }
                } else if(j == cols - 1) {
                    if(i != rows - 1) {
                        grid[i][j] += grid[i + 1][j];
                    }
                } else {
                    grid[i][j] += Math.min(grid[i + 1][j], grid[i][j + 1]);
                }
            }
        }
        return grid[0][0];
    }
}

# 动态规划：另一种想法是，从起点到[i,j]的最短距离是grid[i,j]的值，
# 加上从左边走到[i,j]的距离和从上边走到[i,j]的距离中的较小值。
# 从起点开始，可以直接将计算后的从起点到[i,j]的最短距离保存到grid[i,j]中。

class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;// row
        int n = grid[0].length; // column
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j != 0) {
                    grid[i][j] = grid[i][j] + grid[i][j - 1];
                } else if (i != 0 && j == 0) {
                    grid[i][j] = grid[i][j] + grid[i - 1][j];
                } else if (i == 0 && j == 0) {
                    grid[i][j] = grid[i][j];
                } else {
                    grid[i][j] = Math.min(grid[i][j - 1], grid[i - 1][j])
                            + grid[i][j];
                }
            }
        }
        return grid[m - 1][n - 1];
    }
}
