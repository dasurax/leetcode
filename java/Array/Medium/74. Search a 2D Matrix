Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

# 因为每行有序且后一行大于前一行，因此可将将二维数组视为一维的有序数组，然后二分查找：

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length;
        if(row == 0)
            return false;
        int col = matrix[0].length;
        int start = 0, end = row * col - 1, mid, ri, ci, num;
        while(start <= end) {
            mid = (start + end) / 2;
            ri = mid / col;
            ci = mid % col;
            num = matrix[ri][ci];
            if(num == target)
                return true;
            else if(num < target)
                start = mid + 1;
            else
                end = mid - 1;
        }
        return false;
    }
}

# 另一种方法：判断当前行最后一个元素是否大于target，是则在该行寻找，否则在下一行寻找。（可以在行内使用二分查找）

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length;
        if(row == 0)
            return false;
        int i = 0, j = matrix[0].length - 1;
        while (i < matrix.length && j >= 0) {
            if (matrix[i][j] == target) {
                return true;
            } else if (matrix[i][j] > target) {
                j--;
            } else {
                if(j != matrix[0].length - 1)  //进入该分支说明上一行最后元素大于target，但该行中有一个小于target的，说明target不存在。
                    break;
                i++;
            }
        }
        return false;
    }
}
