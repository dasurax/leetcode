Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

# 迭代：

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        lists.add(new ArrayList<Integer>());
        for(int i: nums) {
            int size = lists.size();
            for(int j = 0; j < size; j++) {
                List<Integer> tmp = new ArrayList<Integer>(lists.get(j));
                tmp.add(i);
                lists.add(tmp);
            }
        }
        return lists;
    }
}

# 回溯（递归）：
# 回溯常见题及解法：https://discuss.leetcode.com/topic/46159/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partitioning

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(list, new ArrayList<>(), nums, 0);
        return list;
    }

    private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
        list.add(new ArrayList<>(tempList));
        for(int i = start; i < nums.length; i++){
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}

# bitmap: 可以用二进制表示元素在不在集合中。用一个二进制正数代表一个集合，第i位代表数组中第i个元素。
# i=0对于着000……000，意味着所有元素都不在集合中。i=3意味着000……011，意味着第0、1个元素在集合中。
# 内存循环中的j代表数组中的第j个元素。i & (1<<j)) != 0意味着i的第j位不为0，因此需要将它加到集合中去。

class Solution {
    public List<List<Integer>> subsets(int[] S) {
        Arrays.sort(S);
        int totalNumber = 1 << S.length;
        List<List<Integer>> collection = new ArrayList<List<Integer>>(totalNumber);
        for (int i=0; i<totalNumber; i++) {
            List<Integer> set = new LinkedList<Integer>();
            for (int j=0; j<S.length; j++) {
                if ((i & (1<<j)) != 0) {
                    set.add(S[j]);
                }
            }
            collection.add(set);
        }
	  return collection;
}
}

