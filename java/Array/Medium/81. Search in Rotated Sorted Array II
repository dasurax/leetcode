Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Write a function to determine if a given target is in the array.

The array may contain duplicates.

# 与Search in Rotated Sorted Array I相比多了可能有重复的限制，当发现mid的值与lo的值相同时，只需把lo++即可，这样相当于是相当于
# 过滤掉了一个重复的元素。

public class Solution {
    public boolean search(int[] A, int target) {
        int lo = 0;
        int hi = A.length - 1;
        if(hi < 0)
            return false;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (A[mid] == target) return true;

            if (A[lo] < A[mid]) {  //如果左半部分递增，且target在左半部分值域内，则继续在左半部分查找，否则一定在右半部分。
                if (target >= A[lo] && target < A[mid]) {
                    hi = mid - 1;
                } else {
                    lo = mid + 1;
                }
            } else if (A[lo] > A[mid]) {  //如果左半部分非递增，则右半部分一定递增。若target在右半部分值域内，则继续在右半部分查找，否则一定在左半部分。
                if (target > A[mid] && target <= A[hi]) {
                    lo = mid + 1;
                } else {
                    hi = mid - 1;
                }
            } else {
                lo++;
            }
        }
        return A[lo] == target ? true : false;
    }
}
