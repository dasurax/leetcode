Given an input string, reverse the string word by word.

For example,
Given s = "the sky is blue",
return "blue is sky the".

Update (2015-02-12):
For C programmers: Try to solve it in-place in O(1) space.

What constitutes a word?
A sequence of non-space characters constitutes a word.
Could the input string contain leading or trailing spaces?
Yes. However, your reversed string should not contain leading or trailing spaces.
How about multiple spaces between two words?
Reduce them to a single space in the reversed string.

# 利用内建函数：

public class Solution {
    public String reverseWords(String s) {
        StringBuilder sb = new StringBuilder();
        String[] words = s.trim().split(" ");
        int l = words.length;
        for(int i = l - 1; i >= 0; i--) {
            if(!words[i].isEmpty())
                sb.append(words[i]).append(" ");
        }
        return sb.toString().trim();
    }
}

public class Solution {
    public String reverseWords(String s) {
        String[] words = s.trim().split(" +");
        Collections.reverse(Arrays.asList(words));
        return String.join(" ", words);
    }
}

# 先清除多余空格，然后翻转整个字符串，然后再将每个单词翻转，代码略。
