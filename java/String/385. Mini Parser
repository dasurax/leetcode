Given a nested list of integers represented as a string, implement a parser to deserialize it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Note: You may assume that the string is well-formed:

String is non-empty.
String does not contain white spaces.
String contains only digits 0-9, [, - ,, ].
Example 1:

Given s = "324",

You should return a NestedInteger object which contains a single integer 324.
Example 2:

Given s = "[123,[456,[789]]]",

Return a NestedInteger object containing a nested list with 2 elements:

1. An integer containing value 123.
2. A nested list containing two elements:
    i.  An integer containing value 456.
    ii. A nested list with one element:
         a. An integer containing value 789.

# 

class Solution {
    public NestedInteger deserialize(String s) {
        int l = s.length();
        if(l == 0) return new NestedInteger();
        if(s.charAt(0) != '[') return new NestedInteger(Integer.parseInt(s));
        Deque<NestedInteger> stack = new LinkedList();
        stack.push(new NestedInteger());
        NestedInteger last = null;
        for(int i = 1; i < l; i++) {
            if(s.charAt(i) == '[') {
                NestedInteger n = new NestedInteger();
                stack.peek().add(n);
                stack.push(n);
            }
            else if(s.charAt(i) == ']')
                last = stack.pop();
            else if(s.charAt(i) != ','){
                StringBuilder sb = new StringBuilder();
                while(s.charAt(i) != ']' && s.charAt(i) != ',')
                    sb.append(s.charAt(i++));
                stack.peek().add(new NestedInteger(Integer.parseInt(sb.toString())));
                i--;
            }
        }
        return last;//parse(new NestedInteger(), s, 1, l);
    }
}
