Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

# 递归：

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<String>();
        bt(list, "", 0, 0, n);
        return list;
    }
    
    public void bt(List<String> list, String tmp, int nl, int nr, int n) {
        if(nl + nr == 2 * n) {
            list.add(tmp);
            return;
        }
        if(nl < n)
            bt(list, tmp + "(", nl + 1, nr, n);
        if(nr < nl)
            bt(list, tmp + ")", nl, nr + 1, n);
    }
}

***
# 迭代（DP）：已知f(n-1)时，f(n) = (f(0))f(n-1) + (f(1))f(n-2) + ... + (f(n-2))f(1) + (f(n-1))f(0)
# 也就是说，当我们得到一对新的待加入的括号时，我们可以把这对括号套住i对括号，剩下的n-i-1对括号放在这对新的括号的右边。
# 被套住的i对括号的组合方式由f(i)给出，剩下n-i-1对括号的组合方式由f(n-i-1)给出。
# 可以证明f(n)包含于(f(0))f(n-1) + (f(1))f(n-2) + ...，且(f(0))f(n-1) + (f(1))f(n-2) + ...包含于f(n)，因此二者相等。
# 更详细证明见：https://discuss.leetcode.com/topic/3474/an-iterative-method/18。

class Solution {
    public class Solution {
        public List<String> generateParenthesis(int n) {
            List<List<String>> lists = new ArrayList<>();
            lists.add(Collections.singletonList(""));
            for (int i = 1; i <= n; ++i) {
                final List<String> list = new ArrayList<>();
                for (int j = 0; j < i; ++j) {
                    for (final String first : lists.get(j)) {
                        for (final String second : lists.get(i - 1 - j)) {
                            list.add("(" + first + ")" + second);
                        }
                    }
                }
                lists.add(list);
            }
            return lists.get(lists.size() - 1);
        }
    }
}
