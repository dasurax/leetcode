A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

# DP: 当前字符与上一个字符构成的字符串值在10到26的范围内，说明新的字符既可以作为单独字符进行解码，也可以和上一个字符一起解码，
# 这种情况下得到递推式num[i + 1] = num[i] + num[i - 1]。否则num[i + 1] = num[i]。
# 一种特殊情况是当前字符为0，只有上一个字符为1或2时才能合在一起解码。

class Solution {
    public int numDecodings(String s) {
        int l = s.length();
        if(l == 0) return 0;
        if(s.charAt(0) == '0') return 0;
        int[] num = new int[l + 1];
        num[0] = 1;
        num[1] = 1;
        for(int i = 1; i < l; i++) {
            char pre = s.charAt(i - 1), cur = s.charAt(i);
            if(cur == '0') {
                if(!(pre == '1' || pre == '2'))
                    return 0;
                else 
                    num[i + 1] = num[i - 1];
            } else if(pre == '1' || (pre == '2' && cur <= '6')) {
                num[i + 1] = num[i] + num[i - 1];
            } else {
                num[i + 1] = num[i];
            }
        }
        return num[l];
    }
}

***
# 因为0不能作为单独的字符解码，因此循环里的条件也可以改下为下面这样：

class Solution {
    public int numDecodings(String s) {
        int l = s.length();
        if(l == 0) return 0;
        if(s.charAt(0) == '0') return 0;
        int[] num = new int[l + 1];
        num[0] = 1;
        num[1] = 1;
        for(int i = 1; i < l; i++) {
            char pre = s.charAt(i - 1), cur = s.charAt(i);
            if(cur == '0' && !(pre == '1' || pre == '2')) {
                return 0;
            }
            if(pre == '1' || (pre == '2' && cur <= '6')) {
                num[i + 1] += num[i - 1];
            }
            if(cur != '0') {
                num[i + 1] += num[i];
            }
        }
        return num[l];
    }
}
