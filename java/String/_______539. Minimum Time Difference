Given a list of 24-hour clock time points in "Hour:Minutes" format, find the minimum minutes difference between any two time points in the list.

Example 1:
Input: ["23:59","00:00"]
Output: 1
Note:
The number of time points in the given list is at least 2 and won't exceed 20000.
The input time is legal and ranges from 00:00 to 23:59.

# 桶排序，O(n+c)，额外空间。因为转换为分钟后总共有1440种可能，用一个数组（Bucket）保存所有出现的时间。
# 若一个时间出现了两次以上，直接返回0，否则遍历找到最小值。
# 在循环过程中不用考虑前后两个时间差(t2-t1)是否超过720（12小时），
# 因为last-first>t2-t1，则1440-(last-first)<1440-(t2-t1)。

public class Solution {
    public int findMinDifference(List<String> timePoints) {
        boolean[] mark = new boolean[24 * 60];
        for (String time : timePoints) {
            String[] t = time.split(":");
            int h = Integer.parseInt(t[0]);
            int m = Integer.parseInt(t[1]);
            if (mark[h * 60 + m]) return 0;
            mark[h * 60 + m] = true;
        }
        int prev = 0, min = Integer.MAX_VALUE;
        int first = Integer.MAX_VALUE, last = Integer.MIN_VALUE;
        for (int i = 0; i < 24 * 60; i++) {
            if (mark[i]) {
                if (first != Integer.MAX_VALUE) {
                    min = Math.min(min, i - prev);
                }
                first = Math.min(first, i);
                last = Math.max(last, i);
                prev = i;
            }
        }
        min = Math.min(min, (24 * 60 - last + first));
        return min;
    }
}

# O(nlogn)，不用额外空间，利用java8特性：

public class Solution {
    public int findMinDifference(List<String> timePoints) {
        int[] minutes = timePoints.stream().mapToInt((s) -> {
            String[] value = s.split(":");
            return 60 * Integer.parseInt(value[0]) + Integer.parseInt(value[1]);
        }).sorted().toArray();

        int min = IntStream.range(0, minutes.length - 1)
            .map(i -> minutes[i + 1] - minutes[i])
            .min()
            .getAsInt();

        int corner = minutes[0] + (1440 - minutes[minutes.length - 1]);
        return Math.min(min, corner);
    }
}
