Given an array of words and a length L, format the text such that each line has exactly L characters 
and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. 
Pad extra spaces ' ' when necessary so that each line has exactly L characters.

Extra spaces between words should be distributed as evenly as possible. 
If the number of spaces on a line do not divide evenly between words, 
the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left justified and no extra space is inserted between words.

For example,
words: ["This", "is", "an", "example", "of", "text", "justification."]
L: 16.

Return the formatted lines as:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]
Note: Each word is guaranteed not to exceed L in length.

Corner Cases:
A line other than the last line might contain only one word. What should you do in this case?
In this case, that line should be left-justified.

# 依次读取单词并判断当前行是否超过长度。填充空格时，除最后一行，填充数量由当前待填充总空格数w和剩余填充位置c决定。

class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        int l = words.length, j, cur = 0, tmp, c, w, dw;
        StringBuilder sb = new StringBuilder();
        List<String> list = new ArrayList<String>(); 
        for(int i = 0; i < l; i++) {
            j = i;
            tmp = words[j].length();
            if(tmp > maxWidth) return null;
            while(cur + tmp <= maxWidth) { 
                cur += tmp;
                j++;
                if(j == l) break;
                tmp = words[j].length() + 1;
                if(tmp - 1 > maxWidth) return null;
            }
            c = j - i - 1;
            w = maxWidth - cur + c;
            sb.append(words[i]);
            for(int k = i + 1; k < j; k++) {
                if(j == l)
                    dw = 1;
                else if(w % c == 0)
                    dw = w / c;
                else
                    dw = w / c + 1;
                buildSpace(sb, dw);
                sb.append(words[k]);
                w -= dw;
                c--;
            }
            buildSpace(sb, w);
            list.add(sb.toString());
            sb.setLength(0);
            cur = 0;
            i = j - 1;
        }
        return list;
    }
    
    public void buildSpace(StringBuilder sb, int n) {
        for(int i = 0; i < n; i++) {
            sb.append(" ");
        }
    }
}
