Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

# DP:若p的前i个字符与s的前j个字符匹配，dp[i][j]为true，否则为false。
# 当p[i]为*以外的字符时，只有当p[i]==s[j]或p[i]为'.'，即当前字符匹配，且除去p[i]和s[j]的部分也匹配时，当前两个子串才是匹配的。
# 当p[i]为*时，有两种可能：若*之前的p[i-1]与s[j]不等，则只有当*代表0个p[i-1]时，才有可能匹配,且取决于到p[i-2]的子串与到s[j]的子串是否匹配；
# 若p[i-1]==s[j]，这时*可以代表0、1和多个p[i-1]。具体如下：
#
# 1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];
# 2, If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];
# 3, If p.charAt(j) == '*': 
#   here are two sub conditions:
#               1   if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty
#               2   if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.':
#                              dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a 
#                           or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a
#                           or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty
                           
class Solution {
    public boolean isMatch(String s, String p) {
        int ls = s.length(), lp = p.length();
        boolean dp[][] = new boolean[ls + 1][lp + 1];
        dp[0][0] = true;
        for(int j = 0; j < lp; j++) {
            if(p.charAt(j) == '*')
                dp[0][j + 1] = dp[0][j - 1];
        }
        for(int i = 0; i < ls; i++) {
            for(int j = 0; j < lp; j++) {
                if(p.charAt(j) == s.charAt(i) || p.charAt(j) == '.')
                    dp[i + 1][j + 1] = dp[i][j];  //用到上层结果。
                else if(p.charAt(j) == '*') {
                    if(p.charAt(j - 1) != '.' && p.charAt(j - 1) != s.charAt(i))
                        dp[i + 1][j + 1] = dp[i + 1][j - 1];
                    else {
                        dp[i + 1][j + 1] = (dp[i + 1][j - 1] || dp[i + 1][j] || dp[i][j + 1]);  //用到上层结果。  
                    }
                }
            }
        }
        return dp[ls][lp];
    }
}

# 可以将二维数组减少到一维。但要注意，如上注释所述的地方要用到上层的结果。但第二处dp[i][j + 1]在修改dp[i+1][j + 1]之前不会被覆盖。
# 因此只需要一个遍历来保存dp[i][j]，也就是左上方的值。

class Solution {
    public boolean isMatch(String s, String p) {
        int ls = s.length(), lp = p.length();
        boolean dp[] = new boolean[lp + 1], leftUp, up;
        dp[0] = true;
        for(int j = 0; j < lp; j++) {
            if(p.charAt(j) == '*')
                dp[j + 1] = dp[j - 1];
        }
        for(int i = 0; i < ls; i++) {
            leftUp = dp[0];
            dp[0] = false;
            for(int j = 0; j < lp; j++) {
                up = dp[j + 1];  //当前的上方在下一轮迭代时将变成左上方。
                if(p.charAt(j) == s.charAt(i) || p.charAt(j) == '.')
                    dp[j + 1] = leftUp;
                else if(p.charAt(j) == '*') {
                    if(p.charAt(j - 1) != '.' && p.charAt(j - 1) != s.charAt(i))
                        dp[j + 1] = dp[j - 1];
                    else {
                        dp[j + 1] = (dp[j - 1] || dp[j] || dp[j + 1]);   
                    }
                } else {
                    dp[j + 1] = false;
                }
                leftUp = up;
            }
        }
        return dp[lp];
    }
}
