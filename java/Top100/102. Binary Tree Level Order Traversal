https://leetcode.com/problems/binary-tree-level-order-traversal/description/

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

# 方法一：bfs

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        if(root == null) return lists;
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        int lastc = 1, c = 0;
        queue.add(root);
        while(!queue.isEmpty()) {
            List<Integer> list = new ArrayList<Integer>();
            while(lastc-- > 0) {
                TreeNode tmp = queue.poll();
                list.add(tmp.val);
                if(tmp.left != null) {
                    c++;
                    queue.add(tmp.left);
                }
                if(tmp.right != null) {
                    c++;
                    queue.add(tmp.right);
                }
            }
            lastc = c;
            c = 0;
            lists.add(list);
        }
        return lists;
    }
}

# 遍历每一层时都会先把上层的节点弹出，把该层的节点入队，因此上面的lastc值实际上等于队列的大小，因此可以简化：

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        if(root == null) return lists;
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while(!queue.isEmpty()) {
            List<Integer> list = new ArrayList<Integer>();
            int cnt = queue.size();  // 注意不要用 i < queue.size()，因为循环内queue是动态改变的
            for(int i = 0; i < cnt; i++) {
                TreeNode tmp = queue.poll();
                list.add(tmp.val);
                if(tmp.left != null) 
                    queue.add(tmp.left);
                if(tmp.right != null) 
                    queue.add(tmp.right);
            }
            lists.add(list);
        }
        return lists;
    }
}

# 方法二：dfs。但从过程来看，该方法不能算是Level Order。

  public List<List<Integer>> levelOrder(TreeNode root) {
      List<List<Integer>> res = new ArrayList<List<Integer>>();
      levelHelper(res, root, 0);
      return res;
  }

  public void levelHelper(List<List<Integer>> res, TreeNode root, int height) {
      if (root == null) return;
      if (height == res.size()) {
          res.add(new LinkedList<Integer>());
      }
      res.get(height).add(root.val);
      levelHelper(res, root.left, height+1);
      levelHelper(res, root.right, height+1);
  }
