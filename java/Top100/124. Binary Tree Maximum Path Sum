https://leetcode.com/problems/binary-tree-maximum-path-sum/description/

Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

# 递归，左子树和右子树之间只有较大的值才会传递到父节点，如果两个值都小于0，那么父节点连接左子树和右子树都不会让结果变大。
# 除了左右子树的值向上一直传递外，左子树与右子树也可以构成路径。
# 因此最大值应更新为左子树+当前节点，右子树+当前节点，左+当前+右，以及max中的最大值。
# 因为规定若左子树或右子树小于0时向上传递的值为0，即tmpmax = Math.max(Math.max(left + root.val, right + root.val), 0);
# 因此左+当前+右一定大于左+当前和右+当前，因此有max = Math.max(left + root.val + right, max);

class Solution {
    private int max = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        if(root == null) return 0;
        maxPathSum2(root);
        return max;
    }
    
    public int maxPathSum2(TreeNode root) {
        if(root == null) return 0;
        int left, right, tmpmax;
        left = maxPathSum2(root.left);
        right = maxPathSum2(root.right);
        tmpmax = Math.max(Math.max(left + root.val, right + root.val), 0);
        max = Math.max(left + root.val + right, max);
        return tmpmax;
    }
}
