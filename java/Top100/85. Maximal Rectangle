https://leetcode.com/problems/maximal-rectangle/description/

Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example:

Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6

# 方法一：利用84. Largest Rectangle in Histogram的结果，前k行可以看作是一组高度最高为k的Histogram，
# 前k行中的Maximal Rectangle就相当于求这组Histogram的Largest Rectangle in Histogram。按行遍历，即可求出最大值。
# 注意当元素为0时，将高度清零。

class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length <= 0 || matrix[0].length <= 0) return 0;
        int rown = matrix.length, coln = matrix[0].length, max = -1;
        int heights[] = new int[coln];
        for(int i = 0; i < rown; i++) {
            for(int j = 0; j < coln; j++) {
                int digit = matrix[i][j] - '0';
                if(digit == 0) heights[j] = 0;
                else heights[j] += 1;
            }
            max = Math.max(max, largestRectangleArea(heights));
        }
        return max;        
    }
    
    public int largestRectangleArea(int[] heights) {
        int l = heights.length, maxArea = 0, i = 0, top = -1;
        int[] stack = new int[l + 1];
        if(l == 0) return 0;
        while(i <= l) {
            int h = (i == l ? 0 : heights[i]); 
            if(top == -1 || h >= heights[stack[top]]) {
                stack[++top] = i++;
            }
            else {
                int mid = stack[top--], left = top == -1 ? -1 : stack[top];
                maxArea = Math.max(maxArea, heights[mid] * (i - left - 1));
            }
        }
        return maxArea;
    }
}

# 因为在求解largestRectangleArea时，当前位置不依赖于后面位置的值，而且每行中的heights也是从左到右生成的，
# 因此可以直接将largestRectangleArea的内容写到循环中去，这样可以省去每行中遍历一遍数组的操作。

class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length <= 0 || matrix[0].length <= 0) return 0;
        int rown = matrix.length, coln = matrix[0].length, max = 0;
        int heights[] = new int[coln];
        int[] stack = new int[coln + 1];
        for(int i = 0; i < rown; i++) {
            int maxArea = 0, top = -1, h, j = 0;
            while(j <= coln) {
                if(j < coln) {
                    int digit = matrix[i][j] - '0';
                    if(digit == 0) heights[j] = 0;
                    else heights[j] += 1;
                    h = heights[j];
                } else h = 0;
                while(top != -1 && h < heights[stack[top]]) {
                    int mid = stack[top--], left = top == -1 ? -1 : stack[top];
                    maxArea = Math.max(maxArea, heights[mid] * (j - left - 1));
                }
                stack[++top] = j++;
            }
            max = Math.max(max, maxArea);
        }
        return max;        
    }
}

# 方法二：DP，https://leetcode.com/problems/maximal-rectangle/discuss/29054/Share-my-DP-solution
# 该方法实际上也可以看作是使用了largestRectangleArea，但largestRectangleArea使用的left和right数组的那种解法。
# 若当前行的当前位置处于一连串的1中，则left记录了这一串1中最左的那个位置与上一行当前位置的left值中较大的那个，
0 0 0 1 0 0 0 
0 0 1 1 1 0 0 
0 1 1 1 1 1 0
# 如第一行第三个位置的left为3，而第二行的第三个位置的left为2(这一串1中最左的那个位置)和3(上一行当前位置的left值)中的较大值。
# 可以看出，第k行第i位置的left和right分别保存了前k行构成的Histograms中，能与当前位置的高度构成矩形的最左侧和最右侧的那个位置。
# 这与使用largestRectangleArea中使用的left和right数组本质是相同的。
# 区别在于这里的直方图的表示形式可以让我们用DP来在O(n)下求得left和right，而largestRectangleArea里需要使用jump的方法来达到O(n)复杂度。
