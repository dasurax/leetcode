https://leetcode.com/problems/house-robber/description/

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
Example 2:

Input: [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
             Total amount you can rob = 2 + 9 + 1 = 12.
             
# 方法1：DP。求到某一个房子为止的最优值有两种情况。
# 第一种，不抢该房子，那么这时总值值就是到上一个房子时抢或不抢所得总金额中较大的那个值。（tmp = Math.max(r, n); n = tmp;）
# 第二种，抢，那么这时总值就是不抢上一个房子所得的总值加上当前房子的总值。（r = n + nums[i];）
# 因此，保存两个遍量，分别表示抢（r）与不抢（n）时的最优值。

class Solution {
    public int rob(int[] nums) {
        int l = nums.length;
        if(l == 0) return 0;
        int r = nums[0], n = 0, tmp;
        for(int i = 1; i < l; i++) {
            tmp = Math.max(r, n);
            r = n + nums[i];
            n = tmp;
        }
        return Math.max(r, n);
    }
}

# 方法2：另一种DP。保存前两个位置的最优值，那么当前的最优值就是前一个位置的最优值（curr，表示不抢当前房子），
# 和前二给位置的最优值加上当前房子（prev + n，表示抢当前房子）。
# 与方法1的区别只是在于计算顺序稍有不同，方法2提前保存了最优值（保存在curr里），而方法1是临时计算的（tmp = Math.max(r, n);）。

class Solution {
    public int rob(int[] nums) {
        int prev = 0, curr = 0;
        for (int n : nums) {
            int tmp = curr;
            curr = Math.max(prev + n, curr);
            prev = tmp;
        }
        return curr;
    }
}
