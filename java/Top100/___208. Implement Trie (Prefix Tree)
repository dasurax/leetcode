https://leetcode.com/problems/implement-trie-prefix-tree/description/

Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

# 使用HashMap保存子节点。

class Trie {
    
    class Node {
        public Map<Character, Node> children;
        public boolean isWord = false;
        public Node() {
            children = new HashMap<>();
        }
    }
    
    private Node root;
    
    /** Initialize your data structure here. */
    public Trie() {
        root = new Node();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        int l = word.length();
        if(l == 0)
            return;
        Node cur = root;
        for(int i = 0; i < l; i++) {
            char c = word.charAt(i);
            if(!cur.children.containsKey(c))
                cur.children.put(c, new Node());
            cur = cur.children.get(c);
        }
        cur.isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        int l = word.length();
        if(l == 0)
            return false;
        Node cur = root;
        for(int i = 0; i < l; i++) {
            char c = word.charAt(i);
            cur = cur.children.get(c);
            if(cur == null)
                return false;
        }
        return cur.isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        int l = prefix.length();
        if(l == 0)
            return true;
        Node cur = root;
        for(int i = 0; i < l; i++) {
            char c = prefix.charAt(i);
            cur = cur.children.get(c);
            if(cur == null)
                return false;
        }
        return true;
    }
}

# 因为只包含a-z，可以使用数组来保存子节点。

class TrieNode {
    public boolean isWord; 
    public TrieNode[] children = new TrieNode[26];
    public TrieNode() {}
}

public class Trie {
    private TrieNode root;
    public Trie() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode ws = root;
        for(int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if(ws.children[c - 'a'] == null){
                ws.children[c - 'a'] = new TrieNode();
            }
            ws = ws.children[c - 'a'];
        }
        ws.isWord = true;
    }

    public boolean search(String word) {
        TrieNode ws = root; 
        for(int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if(ws.children[c - 'a'] == null) return false;
            ws = ws.children[c - 'a'];
        }
        return ws.isWord;
    }

    public boolean startsWith(String prefix) {
        TrieNode ws = root; 
        for(int i = 0; i < prefix.length(); i++){
            char c = prefix.charAt(i);
            if(ws.children[c - 'a'] == null) return false;
            ws = ws.children[c - 'a'];
        }
        return true;
    }
}
