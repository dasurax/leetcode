https://leetcode.com/problems/merge-k-sorted-lists/description/

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

# 方法一：利用 mergeTwoLists，使用分治策略（归并）进行merge。

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0)
            return null;
        int start = 0, end = lists.length - 1;
        return mergeKLists(lists, start, end);
    }
    
    public ListNode mergeKLists(ListNode[] lists, int start, int end) {
        int len = end - start + 1;
        if(len == 1)
            return lists[start];
        if(len == 2)
            return mergeTwoLists(lists[start], lists[start + 1]);
        int mid = (start + end) / 2;
        ListNode left = mergeKLists(lists, start, mid);
        ListNode right = mergeKLists(lists, mid + 1, end);
        return mergeTwoLists(left, right);
    }
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0), cur, l1tmp, tmp;
        dummy.next = l1;
        cur = dummy;
        while(l1 != null && l2 != null) {
            if(l1.val < l2.val) {
                l1 = l1.next;
            } else {
                l1tmp = cur.next;
                cur.next = l2;
                l1 = l2.next;
                l2 = l1tmp;
            }
            cur = cur.next;
        }
        if(l1 == null)
            cur.next = l2;
        else
            cur.next = l1;
        return dummy.next;
    }
}

# 方法二：使用优先级队列。

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0) return null;
        PriorityQueue<ListNode> queue = new PriorityQueue(lists.length, new Comparator<ListNode>() {
            @Override
            public int compare(ListNode o1, ListNode o2) {
                if(o1.val < o2.val)
                    return -1;
                else if (o1.val == o2.val)
                    return 0;
                else 
                    return 1;
            }
        });
        ListNode dummy = new ListNode(0), cur = dummy, tmp;
        
        for(ListNode list: lists) {
            if(list != null)
                queue.add(list);
        }
        
        while((tmp = queue.poll()) != null) {
            cur.next = tmp;
            if(tmp.next != null)
                queue.add(tmp.next);
            cur = cur.next;
        }
        return dummy.next;
    }
}
