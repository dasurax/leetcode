https://leetcode.com/problems/decode-string/description/

Given an encoded string, return it's decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".

# 方法一：递归。遇到字母直接append，遇到数字提取出来，连同'['后面的字符串一同传递给下一层。
# 在下一层中，遇到'['则继续递归处理，遇到']'则将该层中拼接得到的字符串复制times倍，然后返回给上层。

class Solution {
    private int p = 0;
    
    public String decodeString(String s) {
        return decodeString(s, 1).toString();
    }
    
    public StringBuilder decodeString(String s, int times) {
        if(s.isEmpty())
            return new StringBuilder();
        StringBuilder re = new StringBuilder();
        StringBuilder tmp = new StringBuilder();
        StringBuilder n = new StringBuilder();
        int num = 0;
        for(;p < s.length() && s.charAt(p) != ']'; p++) {
            char c = s.charAt(p);
            if(Character.isLetter(c)) {
                tmp.append(c);
            } else if(Character.isDigit(c)) {
                while(Character.isDigit(c)) {
                    n.append(c);
                    c = s.charAt(++p);
                }
                num = Integer.parseInt(n.toString());
                n = new StringBuilder();
                p++; // 跳过'['
                tmp.append(decodeString(s, num));
            }  
        }
        for(int i = 0; i < times; i++) {
            re.append(tmp);
        }
        return re;
    }
}

# 方法二：使用stack。每遇到一个'['就将之前的字符串以及数字入栈，遇到']'就将[]内的字符串复制数字栈顶的值那么多次，再附加到字符串栈顶的字符串上。
# 每次入栈的字符串都是两个'['之间的字符串。与方法一思路是一致的，tmp.append(decodeString(s, num))中的tmp实际上就是两个'['间的字符串。

public class Solution {
    public String decodeString(String s) {
        Stack<Integer> intStack = new Stack<>();
        Stack<StringBuilder> strStack = new Stack<>();
        StringBuilder cur = new StringBuilder();
        int k = 0;
        for (char ch : s.toCharArray()) {
            if (Character.isDigit(ch)) {
                k = k * 10 + ch - '0';
            } else if ( ch == '[') {
                System.out.println(k + " " + cur);
                intStack.push(k);
                strStack.push(cur);
                cur = new StringBuilder();
                k = 0;
            } else if (ch == ']') {
                StringBuilder tmp = cur;
                cur = strStack.pop();
                for (k = intStack.pop(); k > 0; --k) cur.append(tmp);
            } else cur.append(ch);
        }
        return cur.toString();
    }
}
