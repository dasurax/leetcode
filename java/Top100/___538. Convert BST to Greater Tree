https://leetcode.com/problems/convert-bst-to-greater-tree/description/

Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

Example:

Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13
          
# 方法一：先遍历右子树，将右子树返回的值加到根节点上，再将根节点的值传递给左子树，然后再将左子树返回的值返回给上一层。

class Solution {
    public TreeNode convertBST(TreeNode root) {
        convertBST(root, 0);
        return root;
    }
    
    public int convertBST(TreeNode root, int sum) {
        if(root == null)
            return sum;
        int tmp = 0;
        tmp += convertBST(root.right, sum);
        tmp += root.val;
        root.val = tmp;
        return convertBST(root.left, tmp);
    }
}

# 方法二：用全局变量保存sum。

public class Solution {

    int sum = 0;
    
    public TreeNode convertBST(TreeNode root) {
        convert(root);
        return root;
    }
    
    public void convert(TreeNode cur) {
        if (cur == null) return;
        convert(cur.right);
        cur.val += sum;
        sum = cur.val;
        convert(cur.left);
    }
    
}
