# https://leetcode.com/problems/merge-two-binary-trees/description/

Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.

Example 1:
Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
Note: The merging process must start from the root nodes of both trees.

# 直观写法，将t2 merge到 t1。如果t1的左子树为空而t2的左子树不为空，直接将t2的左子树附加到t1的左子树上，右子树同理。
# 都不为空，则递归处理。前两行的判空语句实际上只对第一层有用，因为后面递归调用mergeTrees时都保证了两个参数不为空。

class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if(t1 == null || t2 == null) 
            return t1 == null ? t2 : t1;
        t1.val += t2.val;
        if(t1.left != null && t2.left != null)
            mergeTrees(t1.left, t2.left);
        else if(t2.left != null)
            t1.left = t2.left;
        
        if(t1.right != null && t2.right != null)
            mergeTrees(t1.right, t2.right);
        else if(t2.right != null)
            t1.right = t2.right;
            
        return t1;
    }
}

# 更精简的写法，同样是将t2 merge到t1上去。

class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
       
        if (t1==null)
            return t2;
        
        if(t2!=null){
            t1.val+=t2.val;
            t1.left = mergeTrees(t1.left,t2.left);
            t1.right = mergeTrees(t1.right,t2.right);
        }
        
        return t1;
    }
}
