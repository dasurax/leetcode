https://leetcode.com/problems/reverse-integer/description/

Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers 
within the 32-bit signed integer range: [−231,  231 − 1]. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

# 方法一：对于正数，若最大正数值减去余数再除以10大于等于当前值，那么当前值乘以10之后在加上余数就不会溢出。负数同理。

class Solution {
    public int reverse(int x) {
        int max = Integer.MAX_VALUE, min = Integer.MIN_VALUE;
        int sum = 0;
        boolean neg = x < 0;
        while(x != 0) {
            int r = x % 10;
            x /= 10;
            if(!neg && (max - r) / 10 >= sum || neg && (min - r) / 10 <= sum)
                sum = sum * 10 + r;
            else
                return 0;
        }
        return sum;
    }
}

# 方法二：无需标志位来判断正负。若原来的数乘以10并加上余数后发生了溢出，那么将溢出后的值减去余数在除以10，一定与原来的数不同。

public int reverse(int x)
{
    int result = 0;
    while (x != 0)
    {
        int tail = x % 10;
        int newResult = result * 10 + tail;
        if ((newResult - tail) / 10 != result)
        { return 0; }
        result = newResult;
        x = x / 10;
    }
    return result;
}

