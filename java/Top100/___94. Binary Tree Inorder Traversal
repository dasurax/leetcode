https://leetcode.com/problems/binary-tree-inorder-traversal/description/

Given a binary tree, return the inorder traversal(中序遍历) of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?

# 方法一：递归。

# 方法二：使用栈迭代。
# 下面的写法先将根节点入栈，然后每次检查当前栈顶节点是否有左子节点，有则入栈，没有则将栈顶元素出栈，并访问右子节点。
# 为了表示当前栈顶节点的左子树已经遍历过，使用了stack.peek().left = null的方式，因此会破坏原来的树。

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList();
        if(root == null) return inorder; 
        Stack<TreeNode> stack = new Stack();
        TreeNode leftChild;
        stack.push(root);
        while(!stack.isEmpty()) {
            leftChild = stack.peek().left;
            if(leftChild!= null) {
                stack.peek().left = null;
                stack.push(leftChild);
            }
            else {
                root = stack.pop();
                inorder.add(root.val);
                if(root.right != null) 
                    stack.push(root.right);
            }
        }
        return inorder;
    }
}

# 不破坏原来的树的写法：先沿着左子树一直走，全部入栈，直到为null时，弹出当前栈顶元素，并开始访问右子节点。

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList();
        Stack<TreeNode> stack = new Stack();
        TreeNode cur = root, pre;
        while(cur != null || !stack.isEmpty()) {
            while(cur != null) {
                stack.push(cur);
                cur = cur.left;
            }
            cur = stack.pop();
            inorder.add(cur.val);
            cur = cur.right;
        }
        return inorder;
    }
}

# 方法三：Morris Traversal方法遍历二叉树（非递归，不用栈，O(1)空间）。
# 算法的思路是，对于当前节点cur，找到cur的左子树中的最右侧的节点。
# cur的左子树中的最右侧的节点意味着访问到该节点时，cur的左子树已经全部遍历完毕，需要重新回到cur并开始访问右子树。
# 因此将最右侧节点的right设置为cur。
# 当遍历到了最右侧节点后(对应cur.left == null的条件)，重新跳回到cur.right，这时会开始从cur到cur的左子树中的最右侧的节点的第二次遍历过程。
# 当从cur开始第二次寻找cur的左子树中的最右侧的节点时，因为第一次寻找时将该节点的right设置为了cur(对应pre.right != null的条件)，
# 第二次找到时说明cur的左子树的最右节点已经遍历完了（也就是左子树遍历完了），因此该跳到cur的右子树上了。

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList();
        if(root == null) return inorder; 
        TreeNode cur = root, pre;
        while(cur != null) {
            if(cur.left == null) {
                inorder.add(cur.val);
                cur = cur.right;
            } else {
                pre = cur.left;
                while(pre.right != null && pre.right != cur) { // 不要忘记pre.right != cur这个条件。
                    pre = pre.right;
                } 
                if(pre.right == null) {
                    pre.right = cur;
                    cur = cur.left;
                } else {
                    pre.right = null;  // 这一步是为了不破坏树的结构，但不影响结果。
                    inorder.add(cur.val);
                    cur = cur.right; 
                }
            }
        }
        return inorder;
    }
}
