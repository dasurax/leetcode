# https://leetcode.com/problems/sort-list/description/

Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

# 方法1：递归。归并排序。通过快慢指针来找到中间的节点。为了避免出现意外结果，将链表分为两部分（slow.next=null）。
# 因为递归会占据栈空间，因此实际上不是O(1)的space。
# 递归是一种自顶向下的思路。

class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null)
            return head;
        return mergeSort(head);    
    }
    
    public ListNode mergeSort(ListNode head) {
        if(head.next == null)
            return head;
        ListNode slow = head, fast = head.next, next;
        while(fast.next != null && fast.next.next != null) { 
            slow = slow.next;
            fast = fast.next.next;
        }
        next = slow.next;
        slow.next = null;
        return merge(mergeSort(head), mergeSort(next));
    }
    
    public ListNode merge(ListNode head1, ListNode head2) {
        ListNode head = new ListNode(0), tmp = head;
        while(head1 != null && head2 != null) {
            if(head1.val <= head2.val) {
                tmp.next = head1;
                head1 = head1.next;
            } else {
                tmp.next = head2;
                head2 = head2.next;
            }
            tmp = tmp.next;
        }
        if(head1 == null)
            tmp.next = head2;
        else
            tmp.next = head1;
        return head.next;
    }    
}

# 方法2：自底向上。
# 在第一次迭代时，两两之间进行比较(step=1)。第二次迭代时，将第一对的两个元素和第二对的两个元素merge(step=2)。第三次(step=4)，依此类推。
# 第一次每次取一个，结束时(1,2),(3,4),(5,6),(7,8),(9,10)...每两个之间都是有序的。
# 第二次每次取两个进行merge，结束时(1,2,3,4),(5,6,7,8),....每四个之间都是有序的，依此类推。

class Solution {
public:
	ListNode *sortList(ListNode *head) {
		if(!head || !(head->next)) return head;
		
		//get the linked list's length
		ListNode* cur = head;
		int length = 0;
		while(cur){
			length++;
			cur = cur->next;
		}
		
		ListNode dummy(0);
		dummy.next = head;
		ListNode *left, *right, *tail;
		for(int step = 1; step < length; step <<= 1){
			cur = dummy.next;
			tail = &dummy;
			while(cur){ // 每次取left和right作为一组两两合并,split会将每组截断，tail用来将不同组再重新连起来。
				left = cur;
				right = split(left, step);
				cur = split(right,step);
				tail = merge(left, right, tail);
			}
		}
		return dummy.next;
	}
private:
	/**
	 * Divide the linked list into two lists,
     * while the first list contains first n ndoes
	 * return the second list's head
	 */
	ListNode* split(ListNode *head, int n){
		//if(!head) return NULL;
		for(int i = 1; head && i < n; i++) head = head->next;
		
		if(!head) return NULL; // head为null，就说明没有另外的一部分了。
		ListNode *second = head->next;
		head->next = NULL;  //截断
		return second;
	}
	/**
	  * merge the two sorted linked list l1 and l2,
	  * then append the merged sorted linked list to the node head
	  * return the tail of the merged sorted linked list
	 */
	ListNode* merge(ListNode* l1, ListNode* l2, ListNode* head){
		ListNode *cur = head;
		while(l1 && l2){
			if(l1->val > l2->val){
				cur->next = l2;
				cur = l2;
				l2 = l2->next;
			}
			else{
				cur->next = l1;
				cur = l1;
				l1 = l1->next;
			}
		}
		cur->next = (l1 ? l1 : l2);
		while(cur->next) cur = cur->next;  // return the tail of the merged sorted linked list，为了将后面的节点连接起来。
		return cur;
	}
};

