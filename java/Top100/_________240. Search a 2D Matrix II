https://leetcode.com/problems/search-a-2d-matrix-ii/description/

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.

# 方法一：从矩阵的右上角开始，如果右上角的元素大于target，说明该元素所在的这一列都要大于target，因此向左移动一列。
# 如果右上角的元素小于target，说明该元素所在所在的行都小于target，因此向下移动一行。复杂度O(m+n)。

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length < 1 || matrix[0].length <1) {
            return false;
        }
        int col = matrix[0].length-1;
        int row = 0;
        while(col >= 0 && row <= matrix.length-1) {
            if(target == matrix[row][col]) {
                return true;
            } else if(target < matrix[row][col]) {
                col--;
            } else if(target > matrix[row][col]) {
                row++;
            }
        }
        return false;
    }
}

# 方法二：分治。将矩阵分为4个部分。如果中间点小于target，因为左上部分小于中间点，因此左上部分小于target，只需在剩下三部分里寻找。
# 如果中间点大于target，因为右下部分大于中间点，因此右下部分大于target，也只需在剩下三部分里寻找。

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) return false;
        if(matrix.length == 1 && matrix[0].length == 1) return matrix[0][0] == target;
        return helper(matrix, target, 0, matrix.length-1, 0, matrix[0].length-1);
    }

    public boolean helper(int[][] matrix, int target, int rS, int rE, int cS, int cE) {
        if(rS < 0 || rE >= matrix.length || cS < 0 || cE >= matrix[0].length || rS > rE || cS > cE) return false;

        int rM = rS + (rE-rS)/2, cM = cS + (cE-cS)/2;

        if(matrix[rM][cM] == target) return true;
        else if(matrix[rM][cM] > target) {
            return helper(matrix, target, rS, rM-1, cS, cM-1) || helper(matrix, target, rS, rM-1, cM, cE) || helper(matrix, target, rM, rE, cS, cM-1);
        } else { // matrix[rM][cM] < target
            return helper(matrix, target, rM+1, rE, cM+1, cE) || helper(matrix, target, rM+1, rE, cS, cM) || helper(matrix, target, rS, rM, cM+1, cE);
        }
    }
}

# 方法三：若第一行中有大于target的元素，则该元素右边的所有列（包含该元素所在列）都大于target，可以舍去，只考虑该元素左半边的列。
# 其余三种情况类似。通过折半进行查找。

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int l = matrix.length;
        if(l == 0) return false;
        int c = matrix[0].length, startRow = 0, endRow = l - 1, midRow, startCol = 0, endCol = matrix[0].length - 1, midCol;
        int newStartRow = 0, newEndRow = 0, newStartCol, newEndCol;
        while(startRow <= endRow && startCol <= endCol) {
            midRow = (startRow + endRow) / 2;
            midCol = (startCol + endCol) / 2;
            if(matrix[midRow][startCol] == target || matrix[midRow][endCol] == target || matrix[startRow][midCol] == target || matrix[endRow][midCol] == target)
                return true;
            // 在第一行中找到大于target的元素
            while(midCol <= endCol) {
                if(matrix[startRow][midCol] > target) {
                    endCol = midCol - 1;
                    if(endCol < 0) return false;
                    break;
                } else if(midCol == endCol){
                    break;
                } else {
                    midCol = (midCol + 1 + endCol) / 2;
                }
            }
            // 在最后一行中找到小于target的元素
            midCol = (startCol + endCol) / 2;
            while(midCol >= startCol) {
                if(matrix[endRow][midCol] < target) {
                    startCol = midCol + 1;
                    if(startCol >= c) return false;
                    break;
                } else if(midCol == startCol){
                    break;
                } else  {
                    midCol = (midCol - 1 + startCol) / 2;
                }
            }
            // 在第一列中找到大于target的元素
            while(midRow <= endRow) {
                if(matrix[midRow][startCol] > target) {
                    endRow = midRow - 1;
                    if(endRow < 0) return false;
                    break;
                } else if(midRow == endRow){
                    break;
                } else  {
                    midRow = (midRow + 1 + endRow) / 2;
                }
            }
            // 在最后一列中找到小于target的元素
            midRow = (startRow + endRow) / 2;
            while(midRow >= startRow) {
                if(matrix[midRow][endCol] < target) {
                    startRow = midRow + 1;
                    if(startRow >= l) return false;
                    break;
                } else if(midRow == startRow){
                    break;
                } else  {
                    midRow = (midRow - 1 + startRow) / 2;
                }
            }
        }
        return false;
    }
}
