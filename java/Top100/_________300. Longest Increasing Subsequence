Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?

# 方法一：DP，复杂度O(n*n)。从最后一个位置开始，计算从该位置到结尾的最长递增序列的长度。
# 这样从某一位置i开始的最长递增序列长度，就等于所有在i后面位置且比i大的值所对应的最长递增序列长度中的最大值，再加1（表示把i加入到序列中）。

class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums == null)
            return 0;
        int max = 0, l = nums.length;
        if(l < 2) return l;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = l - 1; i >= 0; i--) {
            int tmpMax = 0;
            for(int j = i + 1; j < l; j++) {
                if(nums[j] > nums[i])
                    tmpMax = Math.max(map.get(j), tmpMax);
            }
            max = Math.max(max, 1 + tmpMax);
            map.put(i, 1 + tmpMax);
        }
        return max;
    }
}

# 方法二。同样是DP，O(nlogn)。通过一个数组，在位置l-1来保存所有长度为l的递增子序列中尾部最小的那个元素。以nums = [4,5,6,3]为例：
# len = 1   :      [4], [5], [6], [3]   => tails[0] = 3
# len = 2   :      [4, 5], [5, 6]       => tails[1] = 5
# len = 3   :      [4, 5, 6]            => tails[2] = 6
# 显然tails数组是递增的。
# 当有新元素时，若新元素大于所有tails的值，则表示该元素可以添加到递增序列中，在tails的尾部新增该元素。
# 否则，通过二分查找找到离新元素最近的且不小于新元素的tails中的值的位置，更新该位置的值。
# 通过tails的更新来理解该方法：更新某一个tails的值时，该位置i和前面的位置i-1正好将x夹在中间（不考虑边界情况）。
# 那么显然x比i-1及之前所有的递增序列值的tail值都大，这些值不受影响，仍保存这原有的tail值。
# 对于i来说，因为x大于i-1，那么我们可以在i-1对应的递增序列后面来加上x，构造出与i位置长度相同的递增序列，又因为x小于i位置的值，
# 因此此时tails需要更新来保存最小的元素。
# 对于大于i的位置，因为所有这些位置的递增子序列的长度都大于原来的tails[i]，而x又小于tails[i]，因此不可能将x附在i位置的序列上来获得更长的序列。
# 因此大于i位置的tail值也不变。综上，每一轮后,tails仍然保存着每个长度的递增子序列中尾部最小的那个元素。
# 最后tails的长度即为所求。
# 之所以要保存最小值，就是为了为后面的值提供“最大的机会”来构成更长的序列。


class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] tails = new int[nums.length];
        int size = 0;
        for (int x : nums) {
            int i = 0, j = size;
            while (i != j) {
                int m = (i + j) / 2;
                if (tails[m] < x)
                    i = m + 1;
                else
                    j = m;
            }
            tails[i] = x;
            if (i == size) ++size;
        }
        return size;
    }
}
