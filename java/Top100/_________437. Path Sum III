https://leetcode.com/problems/path-sum-iii/description/

You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

# 方法一：保存以该节点为根节点的所有路径的长度。该节点的父节点利用子节点的所有可能的路径长度，再计算得出以该节点的父节点为根的所有可能的路径长度。
# 该算法遍历所有的子路径（不一定从根节点开始），在最差情况下（所有节点只有左节点），易知子路径数量为(1+n)*n/2，即复杂度为O(n^2)

class Solution {
    int c = 0;
    public int pathSum(TreeNode root, int sum) {
        if(root == null) return 0;
        pathSum(root, sum, new ArrayList());
        return c;
    }
    
    public void pathSum(TreeNode root, int sum, List<Integer> list) {
        List<Integer> left = new ArrayList(), right = new ArrayList();
        if(root.left != null)
            pathSum(root.left, sum, left);
        if(root.right != null)
            pathSum(root.right, sum, right);
        if(root.val == sum)
            c++;
        list.add(root.val);
        for(int num: left) {
            if(root.val + num == sum)
                c++;
            list.add(root.val + num);
        }
        for(int num: right) {
            if(root.val + num == sum)
                c++;
            list.add(root.val + num);
        }
    }
}

# 方法二：preSum保存的是从root到当前节点cur的路径中，从root到所有中间节点mid的累加和。
# 当前节点的累加和currSum减去preSum中的值，得到的就是从mid到cur的路径的距离。若这个距离等于target，那么就是一条满足条件的路径，
# 即满足 currSum - target = preSum中某个值，即preSum.containsKey(currSum - target)。
# 为了避免preSum保存其他子树上的值，每次处理完一颗子树后，要将当前子树的currSum移除（preSum.put(currSum, preSum.get(currSum) - 1);）。
# 时间复杂度为O(n)。

class Solution {
    public int pathSum(TreeNode root, int sum) {
        HashMap<Integer, Integer> preSum = new HashMap();
        preSum.put(0,1);
        helper(root, 0, sum, preSum);
        return count;
    }
    int count = 0;
    public void helper(TreeNode root, int currSum, int target, HashMap<Integer, Integer> preSum) {
        if (root == null) {
            return;
        }
        currSum += root.val;
        if (preSum.containsKey(currSum - target)) {
            count += preSum.get(currSum - target);
        }
        if (!preSum.containsKey(currSum)) {
            preSum.put(currSum, 1);
        } else {
            preSum.put(currSum, preSum.get(currSum)+1);
        }
        helper(root.left, currSum, target, preSum);
        helper(root.right, currSum, target, preSum);
        preSum.put(currSum, preSum.get(currSum) - 1);
    }
}

# 简洁写法：
class Solution {
    public int pathSum(TreeNode root, int sum) {
        HashMap<Integer, Integer> preSum = new HashMap();
        preSum.put(0,1);
        return helper(root, 0, sum, preSum);
    }
    
    public int helper(TreeNode root, int currSum, int target, HashMap<Integer, Integer> preSum) {
        if (root == null) {
            return 0;
        }
        
        currSum += root.val;
        int res = preSum.getOrDefault(currSum - target, 0);
        preSum.put(currSum, preSum.getOrDefault(currSum, 0) + 1);
        
        res += helper(root.left, currSum, target, preSum) + helper(root.right, currSum, target, preSum);
        preSum.put(currSum, preSum.get(currSum) - 1);
        return res;
    }
}

# 方法三：Typical recursive DFS.对每一个节点，计算从该节点开始的所有长度为sum的路径。思路和方法一其实是相同的。
# Space: O(n) due to recursion.
# Time: O(n^2) in worst case (no branching); O(nlogn) in best case (balanced tree).
# 每一个节点都要执行pathSumFrom，最坏情况下是一条线，每一个节点pathSumFrom的复杂度为O(n)，总复杂度O(n^2)。

public class Solution {
    public int pathSum(TreeNode root, int sum) {
        if (root == null) return 0;
        return pathSumFrom(root, sum) + pathSum(root.left, sum) + pathSum(root.right, sum);
    }
    
    private int pathSumFrom(TreeNode node, int sum) {
        if (node == null) return 0;
        return (node.val == sum ? 1 : 0) 
            + pathSumFrom(node.left, sum - node.val) + pathSumFrom(node.right, sum - node.val);
    }
}
