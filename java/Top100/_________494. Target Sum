https://leetcode.com/problems/target-sum/description/

You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.
Note:
The length of the given array is positive and will not exceed 20.
The sum of elements in the given array will not exceed 1000.
Your output answer is guaranteed to be fitted in a 32-bit integer.

# 方法一：DP。可以看作背包问题，不过该问题不是选择放不放，而是选择放负数还是正数。有两种方式可以在最后一个位置得到s，
# 一种是在最后一个位置取正的nums[l-1]，这样在l-2时有多少种方式能够得到S-nums[l-1]，就有多少种方式在最后时得到S；
# 一种是在最后一个位置取负的nums[l-1]，这样在l-2时有多少种方式能够得到S+nums[l-1]，就有多少种方式在最后时得到S。
# 数组第i个位置对应的是 i - 1000。
# 注意每一轮的dp数组要重新清空，因为0-1背包问题可以通过不选择物品来直接利用上轮的结果，但该问题中每一轮都必须要加上或减去一个数，
# 因此前i个数相加所能得到和在加上第i+1个数后不一定还能得到。

class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int l = nums.length, oldDp[] = new int[2001], newDp[] = new int[2001], sum = 0;
        if(l == 0 || S > 1000 || S < -1000) return 0;
        oldDp[nums[0]+1000] += 1;
        oldDp[-nums[0] + 1000] += 1;
        sum += nums[0];
        for(int i = 1; i < l; i++) {
            sum += nums[i];
            for(int j = -sum + 1000; j <= sum + 1000; j++) {  // 计算下标的时候要+1000，而计算下标所对应的数时要-1000.
                int target = j - 1000;
                int n = target + nums[i] + 1000, p = target - nums[i] + 1000;
                if(n <= 2000)
                    newDp[j] += oldDp[n];
                if(p >= 0)
                    newDp[j] += oldDp[p];
            }
            oldDp = newDp;
            newDp = new int[2001];
        }
        return oldDp[S + 1000];
    }
}

# 上面方法是检查下一轮的dp能否由上一轮的dp更新。下面的思路相反，先找到上一轮不为0的值（即可以影响下一轮的值），
# 利用这个值和nums[i]来更新当前轮的值。

public class Solution {
    public int findTargetSumWays(int[] nums, int s) {
        int sum = 0; 
        for(int i: nums) sum+=i;
        if(s>sum || s<-sum) return 0;
        int[] dp = new int[2*sum+1];
        dp[0+sum] = 1;
        for(int i = 0; i<nums.length; i++){
            int[] next = new int[2*sum+1];
            for(int k = 0; k<2*sum+1; k++){
                if(dp[k]!=0){
                    next[k + nums[i]] += dp[k];
                    next[k - nums[i]] += dp[k];
                }
            }
            dp = next;
        }
        return dp[sum+s];
    }
}

# 方法二：https://leetcode.com/problems/target-sum/discuss/97334/Java-(15-ms)-C++-(3-ms)-O(ns)-iterative-DP-solution-using-subset-sum-with-explanation
# 原问题等价于从一组数中找出一部分需要为负的数和一部分需要为正的数（每一部分的大小可以为0），使得这两部分加起来和为S。有：
#                   sum(P) - sum(N) = target
# sum(P) + sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N) （左右同时加上sum(P) + sum(N)）
#                        2 * sum(P) = target + sum(nums)
# 因此问题转换为了从原数组中找到一组数，使他们相加的和为 (target + sum(nums)) / 2，可以用另一种dp来求解（同 Partition Equal Subset Sum）。

public class Solution {
    public int findTargetSumWays(int[] nums, int s) {
        int sum = 0;
        for (int n : nums)
            sum += n;
        return sum < s || (s + sum) % 2 > 0 ? 0 : subsetSum(nums, (s + sum) >>> 1);  // >>> 无符号右移，即末位补0.
    }   

    public int subsetSum(int[] nums, int s) {
        int[] dp = new int[s + 1]; 
        dp[0] = 1;
        for (int n : nums)
            for (int i = s; i >= n; i--)
                dp[i] += dp[i - n]; 
        return dp[s];
    } 
}

