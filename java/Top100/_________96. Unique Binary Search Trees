https://leetcode.com/problems/unique-binary-search-trees/description/

Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
# DP。https://leetcode.com/problems/unique-binary-search-trees/discuss/31666/DP-Solution-in-6-lines-with-explanation.-F(i-n)-G(i-1)-*-G(n-i)
# 一棵共有n个节点的数，所能构成的BST的总数，为以1 ... n分别作为根节点所能构成的BST的数量的和。
# 以i为根节点的树，所能构成的BST的数量，
# 为[1 ... i-1]所能构成的BST的数量（即左子树为BST的数量）乘以[i+1 ... n]所能构成的BST的数量（即右子树为BST的数量）。
# 因此有G(n) = G(0) * G(n-1) + G(1) * G(n-2) + … + G(n-1) * G(0) 。构成递归形式，因此可以使用DP来求解。

class Solution {
    public int numTrees(int n) {
        int G[] = new int[n + 1];
        G[0] = 1; G[1] = 1;
        for(int i = 2; i <=n; i++) {
            for(int j = 0; j < i; j++) {
                G[i] += G[j] * G[i - j - 1];
            }
        }
        return G[n];
    }
}
