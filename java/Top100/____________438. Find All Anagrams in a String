https://leetcode.com/problems/find-all-anagrams-in-a-string/description/

Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

# 方法一：使用滑动窗口。通过HashMap来记录p中字符出现的次数，counter来计数p中不同字符的个数。
# 当我们移动右窗口时，每遇到一个p中的字符就将Map中对于的值-1。当减为0时，说明当前窗口内，已经出现了足够多的该字符，此时将counter-1，
# 表示还有counter-1个字符的数量暂时还不够组成p。当counter减为0时，说明窗口内的p中各个字符的数量已经足够构成p(有可能比p所需的数量还多)。
# 此时，若窗口大小恰好等于p的长度，说明我们找到了一个符合条件的anagram。
# 若窗口大小大于p的长度，我们需要移动左窗口，同时将移出窗口的字符的HashMap中的值+1，
# 若+1后大于0，表示窗口内该字符的个数又不够了，因此重新开始移动右窗口。

public class Solution {
    public List<Integer> findAnagrams(String s, String t) {
        List<Integer> result = new LinkedList<>();
        if(t.length()> s.length()) return result;
        Map<Character, Integer> map = new HashMap<>();
        for(char c : t.toCharArray()){
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int counter = map.size();
        int begin = 0, end = 0;
        int head = 0;
        int len = Integer.MAX_VALUE;
        
        while(end < s.length()){
            char c = s.charAt(end);
            if( map.containsKey(c) ){
                map.put(c, map.get(c)-1);
                if(map.get(c) == 0) counter--;
            }
            end++;
            while(counter == 0){
                if(end-begin == t.length()){
                    result.add(begin);
                }
                char tempc = s.charAt(begin);
                if(map.containsKey(tempc)){
                    map.put(tempc, map.get(tempc) + 1);
                    if(map.get(tempc) > 0){
                        counter++;
                    }
                }
                begin++;
            }
        }
        return result;
    }
}

# 方法二：同样是滑动窗口，当map中的字符个数大于0时，我们将counter-1（区别于上面等于0时才减1）。
# 相对的，当map中的字符个数大于等于0时，才将counter+1。这里的counter对应的是所需字符的总数，而不是字符种类的个数。
# 同时与上面方法不同的是，该方法永远保持窗口大小不大于p（上面方法只有当窗口内包含所需的字符数后才会移动左窗口，窗口大小可能会大于p的长度）。
# 因此每次只要count==0，因为算法已经保证窗口大小为p，我们可以直接将当前的left加入到结果中。

public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> list = new ArrayList<>();
        if (s == null || s.length() == 0 || p == null || p.length() == 0) return list;
        int[] hash = new int[256]; //character hash

        //record each character in p to hash
        for (char c : p.toCharArray()) {
            hash[c]++;
        }
        //two points, initialize count to p's length
        int left = 0, right = 0, count = p.length();

        while (right < s.length()) {
            //move right everytime, if the character exists in p's hash, decrease the count
            //current hash value >= 1 means the character is existing in p
            if (hash[s.charAt(right)] >= 1) {
                count--;
            }
            hash[s.charAt(right)]--;
            right++;

            //when the count is down to 0, means we found the right anagram
            //then add window's left to result list
            if (count == 0) {
                list.add(left);
            }
            //if we find the window's size equals to p, then we have to move left (narrow the window) to find the new match window
            //++ to reset the hash because we kicked out the left
            //only increase the count if the character is in p
            //the count >= 0 indicate it was original in the hash, cuz it won't go below 0
            if (right - left == p.length() ) {
                if (hash[s.charAt(left)] >= 0) {
                    count++;
                }
                hash[s.charAt(left)]++;
                left++;
            }
        }
        return list;
    }
}
