https://leetcode.com/problems/largest-rectangle-in-histogram/description/

Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.

Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].

The largest rectangle is shown in the shaded area, which has area = 10 unit.

# 方法一：使用stack，当递增时push，当开始递减时pop。pop出的元素位置(mid)一定满足：从mid到i，以及从当前栈顶到mid之间的元素都大于heights[mid]。
# 因为若mid左侧有大于mid的元素时，当mid入栈时这些元素都会被弹出。而在mid后面入栈的一定都是比mid大的。
# 注意这里有个trick，即在heights的最后位置附加个0。如果不这样做，有可能遍历完整个数组后，stack中还有着一个递增的序列，还需要额外的循环来处理。

class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack();
        int l = heights.length, maxArea = 0, i = 0;
        if(l == 0) return 0;
        while(i <= l) {
            int h = (i == l ? 0 : heights[i]); // 相当于在heights的最后位置附加个0
            if(stack.isEmpty() || h >= heights[stack.peek()]) {
                stack.push(i++);
            }
            else {
                int mid = stack.pop(), left = stack.isEmpty() ? -1 : stack.peek();
                maxArea = Math.max(maxArea, heights[mid] * (i - left - 1));
            }
        }
        return maxArea;
    }
}

# 方法二：分治。找到区间内的最小值，则最小值左侧区间求得的最大值与最小值右侧区间求得的最大值无关，可以分开计算。

class Solution {
    public int largestRectangleArea(int[] heights) {
        return find(heights, 0, heights.length - 1);
    }
    private int find(int[] h, int left, int right){
        if(left>right) return 0;
        if(left==right) return h[left];
        int minIndex=left;
        boolean sorted=true;
        for(int i=left+1; i<=right; i++){
            if(h[i]<h[i-1]) sorted=false;
            if(h[i]<h[minIndex]) minIndex=i;
        }
        if(sorted){
            int max=0;
            for(int i=left; i<=right; i++){
                if(h[i]*(right-i+1)>max) max=h[i]*(right-i+1);
            }
            return max;
        }
        else{
            int maxLeft=find(h, left, minIndex-1);
            int maxRight=find(h, minIndex+1, right);
            int crossMax=h[minIndex]*(right-left+1);
            return Math.max(Math.max(maxLeft, maxRight), crossMax);
        }
    }
}

# 方法三：从左到右遍历一遍，记录i左边第一个比h[i]小的位置。再右到左遍历一遍，记录i又边第一个比h[i]小的位置，right[i]-left[i]-1即为h[i]能影响的范围。
# 通过这一步cur = left[cur]来进行quick jump,使得时间复杂度为O(n)。实际上该方法的jump与stack方法的出栈入栈本质上是一样的。
# 当heights[i] <= heights[cur]时，相当于是当前元素小于栈顶元素，这时从cur跳转找到left[cur]，就相当于是出栈操作，
# 再一次比较heights[i]和heights[cur]，就相当于是比较heights[i]和出栈后当前栈顶元素的大小。
# 在stack中，前一个元素是离后一个元素最近的，不大于后一个元素的元素。而left[cur]保存的是cur左边第一个比cur小的位置。
# 例如[1,3,7,8,4,2]，到2时栈内为1,3,4。这时第一步时cur=4,h[cur]=4，相当于栈顶位置是4，对应的值是4，
# 这时2小于4,因此cur跳转到left[cur]即left[4]，left[4]已经算好了，为位置1（由位置4直接跳到位置1的过程可以看作是7和8出栈的过程），
# 此时栈顶为1，对应的值是3。
# 依此类推。

class Solution {
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        if (n == 0) {
            return 0;
        }
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = -1;
        for (int i = 1; i < n; i++) {
            int cur = i - 1;
            while (cur >= 0 && heights[cur] >= heights[i]) {
                cur = left[cur];
            }
            left[i] = cur;
        }
        right[n - 1] = n;
        for (int i = n - 2; i >= 0; i--) {
            int cur = i + 1;
            while (cur < n && heights[cur] >= heights[i]) {
                cur = right[cur];
            }
            right[i] = cur;
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            result = Math.max(result, heights[i] * (right[i] - left[i] - 1));
        }
        return result;
    }
}
