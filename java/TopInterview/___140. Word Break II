https://leetcode.com/problems/word-break-ii/description/

Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]

# 方法一：dfs。当访问到位置i时，将i之后的所有的满足条件的字符串保存，以避免重复的访问。
# 此外可以通过找到dict中最长单词的长度maxLen来进行剪枝。

class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) { 
        int maxLen = 0;
        for (String w : wordDict)
            maxLen = Math.max(maxLen, w.length());
        List<StringBuilder> sbs = dfs(s, 0, new HashMap(), new HashSet(wordDict), maxLen);
        List<String> res = new ArrayList<>();
        for(StringBuilder sb: sbs) {
            res.add(sb.toString().trim());
        }
        return res;
    }
    
    public List<StringBuilder> dfs(String s, int idx, Map<Integer, List<StringBuilder>> visited, Set<String> wordDict, int maxLen) {
        List<StringBuilder> res = new ArrayList<>();
        if(idx == s.length()) {
            res.add(new StringBuilder());
            return res;
        }
        if(visited.containsKey(idx))
            return visited.get(idx);
        for(int i = idx + 1; i <= Math.min(s.length(), idx + maxLen); i++) {
            String word = s.substring(idx, i);             
            if(wordDict.contains(word)) {
                List<StringBuilder> parts = dfs(s, i, visited, wordDict, maxLen);
                for(StringBuilder part: parts) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(word).append(" ").append(part);
                    res.add(sb);
                }
            }
        }
        visited.put(idx, res);
        return res;
    }
}

# 方法二：基本上同方法一，不过是从字符串末尾开始。

public class Solution {
    HashMap<String,List<String>> map = new HashMap<String,List<String>>();
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> res = new ArrayList<String>();
        if(s == null || s.length() == 0) {
            return res;
        }
        if(map.containsKey(s)) {
            return map.get(s);
        }
        if(wordDict.contains(s)) {
            res.add(s);
        }
        for(int i = 1 ; i < s.length() ; i++) {
            String t = s.substring(i);
            if(wordDict.contains(t)) {
                List<String> temp = wordBreak(s.substring(0 , i) , wordDict);
                if(temp.size() != 0) {
                    for(int j = 0 ; j < temp.size() ; j++) {
                        res.add(temp.get(j) + " " + t);
                    }
                }
            }
        }
        map.put(s , res);
        return res;
    }
}
