https://leetcode.com/problems/reverse-linked-list-ii/description/

Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

# 方法一：保存反转位置前一个节点位置和第一个反转的位置（该位置会成为被反转部分反转后的最后一个节点）。
# 反转完指定范围内的节点后，将反转位置前一个节点的next指向最后一个需要反转的节点，同时将第一个反转的节点指向最后一个需要反转的节点的原来的next。
# 用dummy来避免当head也需要反转时所需的特殊处理。

class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null || head.next == null)
            return head;
        ListNode dummy = new ListNode(0), start = dummy, tmp, end, pre = null, next;
        dummy.next = head;
        for(int i = 0; i < m - 1; i++) { // start是需要反转的位置的前一个节点的位置，即m-1。
            start = start.next;
        }
        end = start.next; // end表示第一个需要反转的位置，即m，该节点最后需要链接反转范围后面的链表。
        tmp = end;
        for(int i = 0; i < n - m + 1; i++) {
            next = tmp.next;
            tmp.next = pre;
            pre = tmp;
            tmp = next;
        }
        start.next = pre;
        end.next = tmp;
        return dummy.next;
    }
}

# 方法二：分开来看各个指针。首先then是从m+1的位置遍历到位置n的。
# start和pre指向的节点不变，但指向节点的next一直随着then改变，最终start.next指向范围外的第一个节点，而pre.next指向n。
# start.next指向范围外的第一个节点，即是方法一中所说的“将第一个反转的节点指向最后一个需要反转的节点的原来的next”
# pre.next指向n，即是方法一中所说的“将反转位置前一个节点的next指向最后一个需要反转的节点”
# pre.next指向的就是then的上一个节点。

public ListNode reverseBetween(ListNode head, int m, int n) {
    if(head == null) return null;
    ListNode dummy = new ListNode(0); // create a dummy node to mark the head of this list
    dummy.next = head;
    ListNode pre = dummy; // make a pointer pre as a marker for the node before reversing
    for(int i = 0; i<m-1; i++) pre = pre.next;
    
    ListNode start = pre.next; // a pointer to the beginning of a sub-list that will be reversed
    ListNode then = start.next; // a pointer to a node that will be reversed
    
    // 1 - 2 -3 - 4 - 5 ; m=2; n =4 ---> pre = 1, start = 2, then = 3
    // dummy-> 1 -> 2 -> 3 -> 4 -> 5
    
    for(int i=0; i<n-m; i++)
    {
        start.next = then.next;
        then.next = pre.next;
        pre.next = then;
        then = start.next;
    }
    
    // first reversing : dummy->1 - 3 - 2 - 4 - 5; pre = 1, start = 2, then = 4
    // second reversing: dummy->1 - 4 - 3 - 2 - 5; pre = 1, start = 2, then = 5 (finish)
    
    return dummy.next;
    
}

