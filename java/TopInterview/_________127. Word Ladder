https://leetcode.com/problems/word-ladder/description/

Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output: 5

Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
Example 2:

Input:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

Output: 0

Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.

# 方法一BFS。维持一个队列，保存在新的一轮中可以通过改变上一轮入队的单词中的某一个字符来得到并存在于wordList中的那些单词。
# 为了减少重复计算，将所有入过队的单词加入到vis里，因为如果在前面的几轮就已经访问过某一个单词，那么就没有必要再在后面的轮次中访问这个单词，
# 因为在后面轮通过这个单词达到target的总长度一定会大于在前面轮通过这个单词达到target的总长度。
# 不能在DFS中使用vis，因为深度优先的原因可能在更深层先访问到某个单词，这样在浅层时就会发现这个单词已经被可能更深的层visit过了，会造成错误结果。
# 在表示“改变一个字符”这个逻辑时，我们可以将wordList中每个单词拿出来与出队的单词进行比较，看是否相差一个字符。这种方法当wordList很大时显示会很慢。
# 另一种方式是，我们通过改变当前出队的单词的某一个位置的字符，看看改变后的单词是否出现在wordList中，这样只需26*len(word)次操作。

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList), vis = new HashSet<>();
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        for (int len = 1; !q.isEmpty(); len++) {
            for (int i = q.size(); i > 0; i--) {
                String w = q.poll();
                if (w.equals(endWord)) return len;

                for (int j = 0; j < w.length(); j++) {
                    char[] ch = w.toCharArray();
                    for (char c = 'a'; c <= 'z'; c++) {
                        if (c == w.charAt(j)) continue;
                        ch[j] = c;
                        String nb = String.valueOf(ch);
                        if (dict.contains(nb) && vis.add(nb)) q.offer(nb);
                    }
                }
            }
        }
        return 0;
    }
}

# 方法二：双向BFS。使用两个set来保存改变beginWord和endWord中的一个字符所得到的单词的集合。当两个集合存在不为空的交集时，说明得到了解。
# 在每一轮迭代中，我们遍历较小的那个集合，生成新的集合，如果发现在生成的过程中，某个单词存在于另一个集合中，那么说明我们已经找到了满足条件的路径。

public class Solution {
    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {
        Set<String> beginSet = new HashSet<String>(), endSet = new HashSet<String>();
        int len = 1;
        int strLen = beginWord.length();
        HashSet<String> visited = new HashSet<String>();
        beginSet.add(beginWord);
        endSet.add(endWord);
        while (!beginSet.isEmpty() && !endSet.isEmpty()) {
            if (beginSet.size() > endSet.size()) {
                Set<String> set = beginSet;
                beginSet = endSet;
                endSet = set;
            }
            Set<String> temp = new HashSet<String>();
            for (String word : beginSet) {
                char[] chs = word.toCharArray();
                for (int i = 0; i < chs.length; i++) {
                    for (char c = 'a'; c <= 'z'; c++) {
                        char old = chs[i];
                        chs[i] = c;
                        String target = String.valueOf(chs);
                        if (endSet.contains(target)) {
                            return len + 1;
                        }
                        if (!visited.contains(target) && wordList.contains(target)) {
                            temp.add(target);
                            visited.add(target);
                        }
                        chs[i] = old;
                    }
                }
            }
            beginSet = temp;
            len++;
        }
        return 0;
    }
}
