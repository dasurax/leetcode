https://leetcode.com/problems/largest-number/description/

Given a list of non negative integers, arrange them such that they form the largest number.

Example 1:

Input: [10,2]
Output: "210"
Example 2:

Input: [3,30,34,5,9]
Output: "9534330"

# 思路：先将数字进行排序，规则是如果AB>BA，那么A就排在B的前面。然后再拼接排序后的数组。
# 极端情况下输入全为0，这是排序数组的第一个元素一定是0，返回0。

public class Solution {
    public String largestNumber(int[] num) {
        if(num == null || num.length == 0)
            return "";

        // Convert int array to String array, so we can sort later on
        String[] s_num = new String[num.length];
        for(int i = 0; i < num.length; i++)
            s_num[i] = String.valueOf(num[i]);

        // Comparator to decide which string should come first in concatenation
        Comparator<String> comp = new Comparator<String>(){
            @Override
            public int compare(String str1, String str2) {
                String s1 = str1 + str2;
                String s2 = str2 + str1;
                return s2.compareTo(s1); // reverse order here, so we can do append() later
            }
        };

        Arrays.sort(s_num, comp);
        // An extreme edge case by lc, say you have only a bunch of 0 in your int array
        if(s_num[0].charAt(0) == '0')
            return "0";

        StringBuilder sb = new StringBuilder();
        for(String s: s_num)
            sb.append(s);

        return sb.toString();		
	  }
}

# 精简写法：

public class Solution {
    public String largestNumber(int[] num) {
        String[] array = Arrays.stream(num).mapToObj(String::valueOf).toArray(String[]::new);
        Arrays.sort(array, (String s1, String s2) -> (s2 + s1).compareTo(s1 + s2));
        return Arrays.stream(array).reduce((x, y) -> x.equals("0") ? y : x + y).get();
    }
}

# 证明：https://leetcode.com/problems/largest-number/discuss/53195/Mathematical-proof-of-correctness-of-sorting-method

# 首先可以将AB写作A*f(B)+B， f(B)是B的位数。可以证明若AB<=BA(即B排在A前), BC<=CB(C排在B前)，则AC<=CA(C排在A前)。
# 当得到排序好的数组后，设为[A,B,C,D,...]，可证取得最大值时A一定在最前面。反证法，若A不在最前，
# 则取得最大值时的序列为XXXYAXXX，显然AY>=YA，因此可以通过交换来取得更大的值。
# 同理可证B一定出现在第二部分，依此类推。
