p14 汉诺塔

# 方法一：递归。将1~N层塔从左移到右的步骤为：
# 先将1~N-1从左移到右（递归），将第N层移到中间，将1~N-1从右移到左（递归），将第N层移到右间，最后将1~N-1从左移到右（递归）。
# 将1~N层塔从右移到左的步骤类似。
# 边界情况：只有一层塔（即最上面的塔）需要移动，只需两部即可将它从左移到右或从右移到左。

public class Problem_06_HanoiStack {
    public int hanoiProblem1(int num) {
		if (num < 1) {
			return 0;
		}
		return process(num, "left", "right");
	}

	public int process(int num, String from, String to) {
		if (num == 1) { // 从左到右或从右到左
            System.out.println("Move 1 from " + from + " to " + mid);
            System.out.println("Move 1 from " + mid + " to " + to);
            return 2;
		}
        int part1 = process(num - 1, from, to);
        int part2 = 1;
        //System.out.println("Move " + num + " from " + from + " to " + mid);
        int part3 = process(num - 1, to, from);
        int part4 = 1;
        //System.out.println("Move " + num + " from " + mid + " to " + to);
        int part5 = process(num - 1, from, to);
        return part1 + part2 + part3 + part4 + part5;
	}

	public void main() {
		int num = 4;
		int steps1 = hanoiProblem1(num);
		System.out.println("It will move " + steps1 + " steps.");
		System.out.println("===================================");
	}
}

# 方法二：总共只有四种移动操作：左到中，中到左，中到右，右到中。且移动时有两个原则：
# 首先下一轮不能为上一轮的逆操作（如上一轮左到右，下一轮右到左），因为没有意义；
# 其次，移动后必须要保证从小压大。可以证明这四种操作中只有一种是不违反两个原则的。
# 举例来说上一轮移动是从左到中，那么下一轮左到中和中到左都不可，而中到右和右到中之间只有一个满足小压大。
# 因此每次只要找到合法的移动即可

public class Problem_06_HanoiStack {
    public enum Action {
		No, LToM, MToL, MToR, RToM
	}

	public int hanoiProblem2(int num, String left, String mid, String right) {
		Stack<Integer> lS = new Stack<Integer>();
		Stack<Integer> mS = new Stack<Integer>();
		Stack<Integer> rS = new Stack<Integer>();
		lS.push(Integer.MAX_VALUE);  // 避免判空
		mS.push(Integer.MAX_VALUE);
		rS.push(Integer.MAX_VALUE);
		for (int i = num; i > 0; i--) {
			lS.push(i);
		}
		Action[] record = { Action.No };
		int step = 0;
		while (rS.size() != num + 1) {
            // 依次检查四种操作是否可行。
			step += fStackTotStack(record, Action.MToL, Action.LToM, lS, mS, left, mid);
			step += fStackTotStack(record, Action.LToM, Action.MToL, mS, lS, mid, left);
			step += fStackTotStack(record, Action.RToM, Action.MToR, mS, rS, mid, right);
			step += fStackTotStack(record, Action.MToR, Action.RToM, rS, mS, right, mid);
		}
		return step;
	}

	public int fStackTotStack(Action[] record, Action preNoAct,
			Action nowAct, Stack<Integer> fStack, Stack<Integer> tStack,
			String from, String to) {
        // record[0]保存了上一次的操作，若上一次为preNoAct，那么nowAct就不可以执行（违反不可逆原则）。
        // 如果上一次操作也是nowAct，那么fStack.peek() < tStack.peek()显然不满足。
		if (record[0] != preNoAct && fStack.peek() < tStack.peek()) {
			tStack.push(fStack.pop());
			// System.out.println("Move " + tStack.peek() + " from " + from + " to " + to);
			record[0] = nowAct;
			return 1;
		}
		return 0;
	}
    
    public void main() {
		int num = 4;
		int steps1 = hanoiProblem2(num);
		System.out.println("It will move " + steps1 + " steps.");
		System.out.println("===================================");
	}
}

# 方法三：方法二的简化版。若1在最左侧，我们首先要把他挪到最右侧，然后才能移动其他的。此时只能将左移到中或将中移到左。
# 若1在最右侧，我们首先要把他挪到最左侧，然后才能移动其他的。此时只能将右移到中或将中移到右。
# 当1在中间时，只能将1挪到左或右才能继续进行，因为1在中间时，左右两侧值都要大于1。

public class Problem_06_HanoiStack {
    public int hanoi(int num) {
		Stack<Integer> lS = new Stack<Integer>();
		Stack<Integer> mS = new Stack<Integer>();
		Stack<Integer> rS = new Stack<Integer>();
        int c = 2, p = 1;
        for(int i = num; i > 1; i--) {
            lS.push(i);
        }
        rS.push(1);
        while(!lS.isEmpty() || !mS.isEmpty()) {
            if(p == 0) { // 1在左侧
                if(mS.isEmpty() || !rS.isEmpty() && rS.peek() < mS.peek()) {  // from right to mid
                    mS.push(rS.pop());
                }
                else { // from mid to right
                    rS.push(mS.pop());
                }
                lS.pop();
                rS.push(1);
                p = 1;
            } else {
                if(mS.isEmpty() || !lS.isEmpty() && lS.peek() < mS.peek()) {  // from left to mid
                    mS.push(lS.pop());
                }
                else { // from mid to left
                    lS.push(mS.pop());
                }
                rS.pop();
                lS.push(1);
                p = 0;
            }
            c += 3;
        }
		return c;
	}

	public void main() {
		int num = 4;
		int steps3 = hanoi(num);
		System.out.println("It will move " + steps3 + " steps.");
		System.out.println("===================================");

	}
}
