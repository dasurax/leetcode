https://leetcode.com/problems/implement-queue-using-stacks/description/

Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Example:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // returns 1
queue.pop();   // returns 1
queue.empty(); // returns false
Notes:

You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).

# 使用两个堆栈，新的数据进入in，弹出时从out弹出。当out不为空时，直接从out弹出数据，当out为空时，将所有in的数据依次弹出并压入out内，
# 此时in内最底层的元素（即队列的头部）会变成out的栈顶。

class MyQueue {

    /** Initialize your data structure here. */
    private Stack<Integer> inStack, outStack;
    public MyQueue() {
        inStack = new Stack<>();
        outStack = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        inStack.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(!outStack.isEmpty())
            return outStack.pop();
        while(!inStack.isEmpty())
            outStack.push(inStack.pop());
        return outStack.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        if(!outStack.isEmpty())
            return outStack.peek();
        while(!inStack.isEmpty())
            outStack.push(inStack.pop());
        return outStack.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return inStack.isEmpty() & outStack.isEmpty();
    }
}
