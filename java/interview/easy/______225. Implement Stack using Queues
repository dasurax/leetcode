https://leetcode.com/problems/implement-stack-using-queues/description/

Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Example:

MyStack stack = new MyStack();

stack.push(1);
stack.push(2);  
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false
Notes:

You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

# 方法一：pop和peek复杂度O(n)。每次pop和peek时，将队列中的前n-1个元素依次出队并重新加入队列，这样原来队列尾部元素就变成了头部，相当于栈顶。
# 对于peek操作，因为不像pop一样将元素弹出，因此还需要把它重新加入到队列尾部。

class MyStack {

    /** Initialize your data structure here. */
    Queue<Integer> queue;
    public MyStack() {
        queue = new LinkedList<Integer>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        queue.add(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        int s = queue.size();
        for(int i = 0; i < s - 1; i++) {
            queue.add(queue.poll());
        }
        return queue.poll();
    }
    
    /** Get the top element. */
    public int top() {
        int s = queue.size(), t;
        for(int i = 0; i < s - 1; i++) {
            queue.add(queue.poll());
        }
        t = queue.peek();
        queue.add(queue.poll());
        return t;
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return queue.isEmpty();
    }
}

# 方法一：push复杂度O(n)。每加入一个元素，就把队中之前的所有元素依次出队再入队。举例来说，依次入队1，2，3，4，5，
# 当入队2时，队内为[1,2]，将2之前的元素重新入队变为[2,1]；当入队3时，队内为[2,1,3]，将3之前的元素重新入队变为[3,2,1]，依次类推。
# 实际是保持了与入队顺序相反的顺序。

class Stack {
public:
	queue<int> que;
	// Push element x onto stack.
	void push(int x) {
		que.push(x);
		for(int i=0;i<que.size()-1;++i){
			que.push(que.front());
			que.pop();
		}
	}

	// Removes the element on top of the stack.
	void pop() {
		que.pop();
	}

	// Get the top element.
	int top() {
		return que.front();
	}

	// Return whether the stack is empty.
	bool empty() {
		return que.empty();
	}
};
