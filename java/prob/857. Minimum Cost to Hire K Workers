There are N workers.  The i-th worker has a quality[i] and a minimum wage expectation wage[i].

Now we want to hire exactly K workers to form a paid group.  When hiring a group of K workers, we must pay them according to the following rules:

Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
Every worker in the paid group must be paid at least their minimum wage expectation.
Return the least amount of money needed to form a paid group satisfying the above conditions.

Example 1:

Input: quality = [10,20,5], wage = [70,50,30], K = 2
Output: 105.00000
Explanation: We pay 70 to 0-th worker and 35 to 2-th worker.
Example 2:

Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3
Output: 30.66667
Explanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. 
 

Note:

1 <= K <= N <= 10000, where N = quality.length = wage.length
1 <= quality[i] <= 10000
1 <= wage[i] <= 10000
Answers within 10^-5 of the correct answer will be considered correct.

# 先按ratio从小到大排序，这样对于某一个worker i，我们能保证当满足他的最低期望时，同时一定满足哪些在i前面的worker。
# 这时我们用ratio[i]乘上前面的quality最小的k个worker，然后更新min的值。
# 在计算minv时，一定要包括i，因此要包括i在内的k个最小的quality的和为：qsum - pq.peek() + ratio[i][1]。
# 但实际上也可以用下面的写法：
# qsum += worker[1];
# pq.add(-worker[1]);
# if (pq.size() > K) qsum += pq.poll();
# if (pq.size() == K) res = Math.min(res, qsum * worker[0]);
# 这样如果q[i]是最大的那个，qsum将不含有q[i]，但并不会影响结果，因为当前的ratio[i]大于ratio[i-1]，q[i]又比队列中的所有数大，
# 这样计算出的结果不可能比当前最小值更小。

class Solution {
    public double mincostToHireWorkers(int[] quality, int[] wage, int K) {
        int l = quality.length;
        double ratio[][] = new double[l][2], minv = Double.MAX_VALUE;
        for(int i = 0; i < l; i++) {
            ratio[i][0] = wage[i] / (quality[i] + 0.0);
            ratio[i][1] = quality[i];
        }
        Arrays.sort(ratio, new Comparator<double[]>() {
            @Override
            public int compare(double[] o1, double[] o2) {
                return Double.compare(o1[0], o2[0]);
            }
        });
        PriorityQueue<Double> pq = new PriorityQueue<>(new Comparator<Double>() {
            @Override
            public int compare(Double o1, Double o2) {
                return (int)(o2 - o1);
            }
        });
        int qsum = 0, i = 0;
        while(i < K) {
            qsum += ratio[i][1];
            pq.add(ratio[i++][1]);
        }
        minv = Math.min(ratio[i-1][0] * qsum, minv);
        for(; i < l; i++) {
            minv = Math.min((qsum - pq.peek() + ratio[i][1]) * ratio[i][0], minv);
            qsum += ratio[i][1];
            pq.add(ratio[i][1]);
            qsum -= pq.poll();
        }
        return minv;
    }
}
