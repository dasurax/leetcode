Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.

Note:
The array size can be very large. Solution that uses too much extra space will not pass the judge.

Example:

int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);

// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(3);

// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);

# 方法一：排序后找到范围，将每个值的排序后的起始位置和终止位置的下标及其排序前的下标进行保存。
# init:O(nlg(n)),pick:O(1),space:O(N)。

# 方法二：用map保存每个值的所有下标到数组中，然后随机选取数组的下标，并取该下标对应的原数组的下标。
# init:O(n),pick:O(1),space:O(N)。

public class Solution {

    public Solution(int[] nums) {
        for (int i=0; i<nums.length; i++) {
            int num = nums[i];
            if (!indexes.containsKey(num))
                indexes.put(num, new ArrayList<Integer>());
            indexes.get(num).add(i);
        }
    }
    
    public int pick(int target) {
        List<Integer> indexes = this.indexes.get(target);
        int i = (int) (Math.random() * indexes.size());
        return indexes.get(i);
    }
    
    private Map<Integer, List<Integer>> indexes = new HashMap<>();
}

# 方法三：水库抽样。target以外的元素都不考虑，水库容量k=1。对于每一个等于target的元素，以1/n的概率用其下标替换掉上一次保存的下标，
# n为target出现的次数（即相当于数据流中的第n个元素）。
# 水库抽样证明：https://blog.csdn.net/so_geili/article/details/52937212。
# pick:O(N),space:O(1)。

public class Solution {
    
    Random rnd;
    int nums[];
    public Solution(int[] nums) {
        rnd = new Random();
        this.nums = nums;
    }
    
    public int pick(int target) {
        int ret = 0, n = 1;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == target) {
                if(Math.random() <= 1.0 / n) 
                    ret = i;
                n++;
            }
        }
        return ret;
    }
}

# 另一种随机采样的写法，也能保证1/n的概率。

public class Solution {

    int[] nums;
    Random rnd;

    public Solution(int[] nums) {
        this.nums = nums;
        this.rnd = new Random();
    }
    
    public int pick(int target) {
        int result = -1;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != target)
                continue;
            if (rnd.nextInt(++count) == 0)
                result = i;
        }
        
        return result;
    }
}

